{"mappings":"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","sources":["<anon>","src/index.ts","node_modules/@twa-dev/sdk/dist/index.js","node_modules/@twa-dev/sdk/src/index.ts","node_modules/@twa-dev/sdk/dist/sdk.js","node_modules/@twa-dev/sdk/src/sdk.ts","node_modules/@twa-dev/sdk/dist/telegram-web-apps.js","node_modules/@twa-dev/sdk/src/telegram-web-apps.js"],"sourcesContent":["\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\nvar $abccaeccf2464339$exports = {};\n\"use strict\";\nObject.defineProperty($abccaeccf2464339$exports, \"__esModule\", {\n    value: true\n});\nvar $b98eaee7c212cfa1$exports = {};\n\"use strict\";\nObject.defineProperty($b98eaee7c212cfa1$exports, \"__esModule\", {\n    value: true\n});\n$b98eaee7c212cfa1$exports.WebApp = void 0;\n\"use strict\";\n// WebView\n(function() {\n    var eventHandlers = {};\n    var locationHash = \"\";\n    try {\n        locationHash = location.hash.toString();\n    } catch (e) {}\n    var initParams = urlParseHashParams(locationHash);\n    var storedParams = sessionStorageGet(\"initParams\");\n    if (storedParams) {\n        for(var key in storedParams)if (typeof initParams[key] === \"undefined\") initParams[key] = storedParams[key];\n    }\n    sessionStorageSet(\"initParams\", initParams);\n    var isIframe = false, iFrameStyle;\n    try {\n        isIframe = window.parent != null && window != window.parent;\n        if (isIframe) {\n            window.addEventListener(\"message\", function(event) {\n                if (event.source !== window.parent) return;\n                try {\n                    var dataParsed = JSON.parse(event.data);\n                } catch (e) {\n                    return;\n                }\n                if (!dataParsed || !dataParsed.eventType) return;\n                if (dataParsed.eventType == \"set_custom_style\") {\n                    if (event.origin === \"https://web.telegram.org\") iFrameStyle.innerHTML = dataParsed.eventData;\n                } else if (dataParsed.eventType == \"reload_iframe\") {\n                    try {\n                        window.parent.postMessage(JSON.stringify({\n                            eventType: \"iframe_will_reload\"\n                        }), \"*\");\n                    } catch (e) {}\n                    location.reload();\n                } else receiveEvent(dataParsed.eventType, dataParsed.eventData);\n            });\n            iFrameStyle = document.createElement(\"style\");\n            document.head.appendChild(iFrameStyle);\n            try {\n                window.parent.postMessage(JSON.stringify({\n                    eventType: \"iframe_ready\",\n                    eventData: {\n                        reload_supported: true\n                    }\n                }), \"*\");\n            } catch (e) {}\n        }\n    } catch (e) {}\n    function urlSafeDecode(urlencoded) {\n        try {\n            urlencoded = urlencoded.replace(/\\+/g, \"%20\");\n            return decodeURIComponent(urlencoded);\n        } catch (e) {\n            return urlencoded;\n        }\n    }\n    function urlParseHashParams(locationHash) {\n        locationHash = locationHash.replace(/^#/, \"\");\n        var params = {};\n        if (!locationHash.length) return params;\n        if (locationHash.indexOf(\"=\") < 0 && locationHash.indexOf(\"?\") < 0) {\n            params._path = urlSafeDecode(locationHash);\n            return params;\n        }\n        var qIndex = locationHash.indexOf(\"?\");\n        if (qIndex >= 0) {\n            var pathParam = locationHash.substr(0, qIndex);\n            params._path = urlSafeDecode(pathParam);\n            locationHash = locationHash.substr(qIndex + 1);\n        }\n        var query_params = urlParseQueryString(locationHash);\n        for(var k in query_params)params[k] = query_params[k];\n        return params;\n    }\n    function urlParseQueryString(queryString) {\n        var params = {};\n        if (!queryString.length) return params;\n        var queryStringParams = queryString.split(\"&\");\n        var i, param, paramName, paramValue;\n        for(i = 0; i < queryStringParams.length; i++){\n            param = queryStringParams[i].split(\"=\");\n            paramName = urlSafeDecode(param[0]);\n            paramValue = param[1] == null ? null : urlSafeDecode(param[1]);\n            params[paramName] = paramValue;\n        }\n        return params;\n    }\n    // Telegram apps will implement this logic to add service params (e.g. tgShareScoreUrl) to game URL\n    function urlAppendHashParams(url, addHash) {\n        // url looks like 'https://game.com/path?query=1#hash'\n        // addHash looks like 'tgShareScoreUrl=' + encodeURIComponent('tgb://share_game_score?hash=very_long_hash123')\n        var ind = url.indexOf(\"#\");\n        if (ind < 0) // https://game.com/path -> https://game.com/path#tgShareScoreUrl=etc\n        return url + \"#\" + addHash;\n        var curHash = url.substr(ind + 1);\n        if (curHash.indexOf(\"=\") >= 0 || curHash.indexOf(\"?\") >= 0) // https://game.com/#hash=1 -> https://game.com/#hash=1&tgShareScoreUrl=etc\n        // https://game.com/#path?query -> https://game.com/#path?query&tgShareScoreUrl=etc\n        return url + \"&\" + addHash;\n        // https://game.com/#hash -> https://game.com/#hash?tgShareScoreUrl=etc\n        if (curHash.length > 0) return url + \"?\" + addHash;\n        // https://game.com/# -> https://game.com/#tgShareScoreUrl=etc\n        return url + addHash;\n    }\n    function postEvent(eventType, callback, eventData) {\n        if (!callback) callback = function() {};\n        if (eventData === undefined) eventData = \"\";\n        console.log(\"[Telegram.WebView] > postEvent\", eventType, eventData);\n        if (window.TelegramWebviewProxy !== undefined) {\n            TelegramWebviewProxy.postEvent(eventType, JSON.stringify(eventData));\n            callback();\n        } else if (window.external && \"notify\" in window.external) {\n            window.external.notify(JSON.stringify({\n                eventType: eventType,\n                eventData: eventData\n            }));\n            callback();\n        } else if (isIframe) try {\n            var trustedTarget = \"https://web.telegram.org\";\n            // For now we don't restrict target, for testing purposes\n            trustedTarget = \"*\";\n            window.parent.postMessage(JSON.stringify({\n                eventType: eventType,\n                eventData: eventData\n            }), trustedTarget);\n            callback();\n        } catch (e) {\n            callback(e);\n        }\n        else callback({\n            notAvailable: true\n        });\n    }\n    function receiveEvent(eventType, eventData) {\n        console.log(\"[Telegram.WebView] < receiveEvent\", eventType, eventData);\n        callEventCallbacks(eventType, function(callback) {\n            callback(eventType, eventData);\n        });\n    }\n    function callEventCallbacks(eventType, func) {\n        var curEventHandlers = eventHandlers[eventType];\n        if (curEventHandlers === undefined || !curEventHandlers.length) return;\n        for(var i = 0; i < curEventHandlers.length; i++)try {\n            func(curEventHandlers[i]);\n        } catch (e) {}\n    }\n    function onEvent(eventType, callback) {\n        if (eventHandlers[eventType] === undefined) eventHandlers[eventType] = [];\n        var index = eventHandlers[eventType].indexOf(callback);\n        if (index === -1) eventHandlers[eventType].push(callback);\n    }\n    function offEvent(eventType, callback) {\n        if (eventHandlers[eventType] === undefined) return;\n        var index = eventHandlers[eventType].indexOf(callback);\n        if (index === -1) return;\n        eventHandlers[eventType].splice(index, 1);\n    }\n    function openProtoUrl(url) {\n        if (!url.match(/^(web\\+)?tgb?:\\/\\/./)) return false;\n        var useIframe = navigator.userAgent.match(/iOS|iPhone OS|iPhone|iPod|iPad/i) ? true : false;\n        if (useIframe) {\n            var iframeContEl = document.getElementById(\"tgme_frame_cont\") || document.body;\n            var iframeEl = document.createElement(\"iframe\");\n            iframeContEl.appendChild(iframeEl);\n            var pageHidden = false;\n            var enableHidden = function() {\n                pageHidden = true;\n            };\n            window.addEventListener(\"pagehide\", enableHidden, false);\n            window.addEventListener(\"blur\", enableHidden, false);\n            if (iframeEl !== null) iframeEl.src = url;\n            setTimeout(function() {\n                if (!pageHidden) window.location = url;\n                window.removeEventListener(\"pagehide\", enableHidden, false);\n                window.removeEventListener(\"blur\", enableHidden, false);\n            }, 2000);\n        } else window.location = url;\n        return true;\n    }\n    function sessionStorageSet(key, value) {\n        try {\n            window.sessionStorage.setItem(\"__telegram__\" + key, JSON.stringify(value));\n            return true;\n        } catch (e) {}\n        return false;\n    }\n    function sessionStorageGet(key) {\n        try {\n            return JSON.parse(window.sessionStorage.getItem(\"__telegram__\" + key));\n        } catch (e) {}\n        return null;\n    }\n    if (!window.Telegram) window.Telegram = {};\n    window.Telegram.WebView = {\n        initParams: initParams,\n        isIframe: isIframe,\n        onEvent: onEvent,\n        offEvent: offEvent,\n        postEvent: postEvent,\n        receiveEvent: receiveEvent,\n        callEventCallbacks: callEventCallbacks\n    };\n    window.Telegram.Utils = {\n        urlSafeDecode: urlSafeDecode,\n        urlParseQueryString: urlParseQueryString,\n        urlParseHashParams: urlParseHashParams,\n        urlAppendHashParams: urlAppendHashParams,\n        sessionStorageSet: sessionStorageSet,\n        sessionStorageGet: sessionStorageGet\n    };\n    // For Windows Phone app\n    window.TelegramGameProxy_receiveEvent = receiveEvent;\n    // App backward compatibility\n    window.TelegramGameProxy = {\n        receiveEvent: receiveEvent\n    };\n})();\n// WebApp\n(function() {\n    var Utils = window.Telegram.Utils;\n    var WebView = window.Telegram.WebView;\n    var initParams = WebView.initParams;\n    var isIframe = WebView.isIframe;\n    var WebApp = {};\n    var webAppInitData = \"\", webAppInitDataUnsafe = {};\n    var themeParams = {}, colorScheme = \"light\";\n    var webAppVersion = \"6.0\";\n    var webAppPlatform = \"unknown\";\n    if (initParams.tgWebAppData && initParams.tgWebAppData.length) {\n        webAppInitData = initParams.tgWebAppData;\n        webAppInitDataUnsafe = Utils.urlParseQueryString(webAppInitData);\n        for(var key in webAppInitDataUnsafe){\n            var val = webAppInitDataUnsafe[key];\n            try {\n                if (val.substr(0, 1) == \"{\" && val.substr(-1) == \"}\" || val.substr(0, 1) == \"[\" && val.substr(-1) == \"]\") webAppInitDataUnsafe[key] = JSON.parse(val);\n            } catch (e) {}\n        }\n    }\n    if (initParams.tgWebAppThemeParams && initParams.tgWebAppThemeParams.length) {\n        var themeParamsRaw = initParams.tgWebAppThemeParams;\n        try {\n            var theme_params = JSON.parse(themeParamsRaw);\n            if (theme_params) setThemeParams(theme_params);\n        } catch (e) {}\n    }\n    var theme_params = Utils.sessionStorageGet(\"themeParams\");\n    if (theme_params) setThemeParams(theme_params);\n    if (initParams.tgWebAppVersion) webAppVersion = initParams.tgWebAppVersion;\n    if (initParams.tgWebAppPlatform) webAppPlatform = initParams.tgWebAppPlatform;\n    function onThemeChanged(eventType, eventData) {\n        if (eventData.theme_params) {\n            setThemeParams(eventData.theme_params);\n            window.Telegram.WebApp.MainButton.setParams({});\n            updateBackgroundColor();\n            receiveWebViewEvent(\"themeChanged\");\n        }\n    }\n    var lastWindowHeight = window.innerHeight;\n    function onViewportChanged(eventType, eventData) {\n        if (eventData.height) {\n            window.removeEventListener(\"resize\", onWindowResize);\n            setViewportHeight(eventData);\n        }\n    }\n    function onWindowResize(e) {\n        if (lastWindowHeight != window.innerHeight) {\n            lastWindowHeight = window.innerHeight;\n            receiveWebViewEvent(\"viewportChanged\", {\n                isStateStable: true\n            });\n        }\n    }\n    function linkHandler(e) {\n        if (e.metaKey || e.ctrlKey) return;\n        var el = e.target;\n        while(el.tagName != \"A\" && el.parentNode)el = el.parentNode;\n        if (el.tagName == \"A\" && el.target != \"_blank\" && (el.protocol == \"http:\" || el.protocol == \"https:\") && el.hostname == \"t.me\") {\n            WebApp.openTgLink(el.href);\n            e.preventDefault();\n        }\n    }\n    function strTrim(str) {\n        return str.toString().replace(/^\\s+|\\s+$/g, \"\");\n    }\n    function receiveWebViewEvent(eventType) {\n        var args = Array.prototype.slice.call(arguments);\n        eventType = args.shift();\n        WebView.callEventCallbacks(\"webview:\" + eventType, function(callback) {\n            callback.apply(WebApp, args);\n        });\n    }\n    function onWebViewEvent(eventType, callback) {\n        WebView.onEvent(\"webview:\" + eventType, callback);\n    }\n    function offWebViewEvent(eventType, callback) {\n        WebView.offEvent(\"webview:\" + eventType, callback);\n    }\n    function setCssProperty(name, value) {\n        var root = document.documentElement;\n        if (root && root.style && root.style.setProperty) root.style.setProperty(\"--tg-\" + name, value);\n    }\n    function setThemeParams(theme_params) {\n        // temp iOS fix\n        if (theme_params.bg_color == \"#1c1c1d\" && theme_params.bg_color == theme_params.secondary_bg_color) theme_params.secondary_bg_color = \"#2c2c2e\";\n        var color;\n        for(var key in theme_params)if (color = parseColorToHex(theme_params[key])) {\n            themeParams[key] = color;\n            if (key == \"bg_color\") {\n                colorScheme = isColorDark(color) ? \"dark\" : \"light\";\n                setCssProperty(\"color-scheme\", colorScheme);\n            }\n            key = \"theme-\" + key.split(\"_\").join(\"-\");\n            setCssProperty(key, color);\n        }\n        Utils.sessionStorageSet(\"themeParams\", themeParams);\n    }\n    var webAppCallbacks = {};\n    function generateCallbackId(len) {\n        var tries = 100;\n        while(--tries){\n            var id = \"\", chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\", chars_len = chars.length;\n            for(var i = 0; i < len; i++)id += chars[Math.floor(Math.random() * chars_len)];\n            if (!webAppCallbacks[id]) {\n                webAppCallbacks[id] = {};\n                return id;\n            }\n        }\n        throw Error(\"WebAppCallbackIdGenerateFailed\");\n    }\n    var viewportHeight = false, viewportStableHeight = false, isExpanded = true;\n    function setViewportHeight(data) {\n        if (typeof data !== \"undefined\") {\n            isExpanded = !!data.is_expanded;\n            viewportHeight = data.height;\n            if (data.is_state_stable) viewportStableHeight = data.height;\n            receiveWebViewEvent(\"viewportChanged\", {\n                isStateStable: !!data.is_state_stable\n            });\n        }\n        var height, stable_height;\n        if (viewportHeight !== false) height = viewportHeight - mainButtonHeight + \"px\";\n        else height = mainButtonHeight ? \"calc(100vh - \" + mainButtonHeight + \"px)\" : \"100vh\";\n        if (viewportStableHeight !== false) stable_height = viewportStableHeight - mainButtonHeight + \"px\";\n        else stable_height = mainButtonHeight ? \"calc(100vh - \" + mainButtonHeight + \"px)\" : \"100vh\";\n        setCssProperty(\"viewport-height\", height);\n        setCssProperty(\"viewport-stable-height\", stable_height);\n    }\n    var isClosingConfirmationEnabled = false;\n    function setClosingConfirmation(need_confirmation) {\n        if (!versionAtLeast(\"6.2\")) {\n            console.warn(\"[Telegram.WebApp] Closing confirmation is not supported in version \" + webAppVersion);\n            return;\n        }\n        isClosingConfirmationEnabled = !!need_confirmation;\n        WebView.postEvent(\"web_app_setup_closing_behavior\", false, {\n            need_confirmation: isClosingConfirmationEnabled\n        });\n    }\n    var headerColorKey = \"bg_color\", headerColor = null;\n    function getHeaderColor() {\n        if (headerColorKey == \"secondary_bg_color\") return themeParams.secondary_bg_color;\n        else if (headerColorKey == \"bg_color\") return themeParams.bg_color;\n        return headerColor;\n    }\n    function setHeaderColor(color) {\n        if (!versionAtLeast(\"6.1\")) {\n            console.warn(\"[Telegram.WebApp] Header color is not supported in version \" + webAppVersion);\n            return;\n        }\n        if (!versionAtLeast(\"6.9\")) {\n            if (themeParams.bg_color && themeParams.bg_color == color) color = \"bg_color\";\n            else if (themeParams.secondary_bg_color && themeParams.secondary_bg_color == color) color = \"secondary_bg_color\";\n        }\n        var head_color = null, color_key = null;\n        if (color == \"bg_color\" || color == \"secondary_bg_color\") color_key = color;\n        else if (versionAtLeast(\"6.9\")) {\n            head_color = parseColorToHex(color);\n            if (!head_color) {\n                console.error(\"[Telegram.WebApp] Header color format is invalid\", color);\n                throw Error(\"WebAppHeaderColorInvalid\");\n            }\n        }\n        if (!versionAtLeast(\"6.9\") && color_key != \"bg_color\" && color_key != \"secondary_bg_color\") {\n            console.error(\"[Telegram.WebApp] Header color key should be one of Telegram.WebApp.themeParams.bg_color, Telegram.WebApp.themeParams.secondary_bg_color, 'bg_color', 'secondary_bg_color'\", color);\n            throw Error(\"WebAppHeaderColorKeyInvalid\");\n        }\n        headerColorKey = color_key;\n        headerColor = head_color;\n        updateHeaderColor();\n    }\n    var appHeaderColorKey = null, appHeaderColor = null;\n    function updateHeaderColor() {\n        if (appHeaderColorKey != headerColorKey || appHeaderColor != headerColor) {\n            appHeaderColorKey = headerColorKey;\n            appHeaderColor = headerColor;\n            if (appHeaderColor) WebView.postEvent(\"web_app_set_header_color\", false, {\n                color: headerColor\n            });\n            else WebView.postEvent(\"web_app_set_header_color\", false, {\n                color_key: headerColorKey\n            });\n        }\n    }\n    var backgroundColor = \"bg_color\";\n    function getBackgroundColor() {\n        if (backgroundColor == \"secondary_bg_color\") return themeParams.secondary_bg_color;\n        else if (backgroundColor == \"bg_color\") return themeParams.bg_color;\n        return backgroundColor;\n    }\n    function setBackgroundColor(color) {\n        if (!versionAtLeast(\"6.1\")) {\n            console.warn(\"[Telegram.WebApp] Background color is not supported in version \" + webAppVersion);\n            return;\n        }\n        var bg_color;\n        if (color == \"bg_color\" || color == \"secondary_bg_color\") bg_color = color;\n        else {\n            bg_color = parseColorToHex(color);\n            if (!bg_color) {\n                console.error(\"[Telegram.WebApp] Background color format is invalid\", color);\n                throw Error(\"WebAppBackgroundColorInvalid\");\n            }\n        }\n        backgroundColor = bg_color;\n        updateBackgroundColor();\n    }\n    var appBackgroundColor = null;\n    function updateBackgroundColor() {\n        var color = getBackgroundColor();\n        if (appBackgroundColor != color) {\n            appBackgroundColor = color;\n            WebView.postEvent(\"web_app_set_background_color\", false, {\n                color: color\n            });\n        }\n    }\n    function parseColorToHex(color) {\n        color += \"\";\n        var match;\n        if (match = /^\\s*#([0-9a-f]{6})\\s*$/i.exec(color)) return \"#\" + match[1].toLowerCase();\n        else if (match = /^\\s*#([0-9a-f])([0-9a-f])([0-9a-f])\\s*$/i.exec(color)) return (\"#\" + match[1] + match[1] + match[2] + match[2] + match[3] + match[3]).toLowerCase();\n        else if (match = /^\\s*rgba?\\((\\d+),\\s*(\\d+),\\s*(\\d+)(?:,\\s*(\\d+\\.{0,1}\\d*))?\\)\\s*$/.exec(color)) {\n            var r = parseInt(match[1]), g = parseInt(match[2]), b = parseInt(match[3]);\n            r = (r < 16 ? \"0\" : \"\") + r.toString(16);\n            g = (g < 16 ? \"0\" : \"\") + g.toString(16);\n            b = (b < 16 ? \"0\" : \"\") + b.toString(16);\n            return \"#\" + r + g + b;\n        }\n        return false;\n    }\n    function isColorDark(rgb) {\n        rgb = rgb.replace(/[\\s#]/g, \"\");\n        if (rgb.length == 3) rgb = rgb[0] + rgb[0] + rgb[1] + rgb[1] + rgb[2] + rgb[2];\n        var r = parseInt(rgb.substr(0, 2), 16);\n        var g = parseInt(rgb.substr(2, 2), 16);\n        var b = parseInt(rgb.substr(4, 2), 16);\n        var hsp = Math.sqrt(0.299 * (r * r) + 0.587 * (g * g) + 0.114 * (b * b));\n        return hsp < 120;\n    }\n    function versionCompare(v1, v2) {\n        if (typeof v1 !== \"string\") v1 = \"\";\n        if (typeof v2 !== \"string\") v2 = \"\";\n        v1 = v1.replace(/^\\s+|\\s+$/g, \"\").split(\".\");\n        v2 = v2.replace(/^\\s+|\\s+$/g, \"\").split(\".\");\n        var a = Math.max(v1.length, v2.length), i, p1, p2;\n        for(i = 0; i < a; i++){\n            p1 = parseInt(v1[i]) || 0;\n            p2 = parseInt(v2[i]) || 0;\n            if (p1 == p2) continue;\n            if (p1 > p2) return 1;\n            return -1;\n        }\n        return 0;\n    }\n    function versionAtLeast(ver) {\n        return versionCompare(webAppVersion, ver) >= 0;\n    }\n    function byteLength(str) {\n        if (window.Blob) try {\n            return new Blob([\n                str\n            ]).size;\n        } catch (e) {}\n        var s = str.length;\n        for(var i = str.length - 1; i >= 0; i--){\n            var code = str.charCodeAt(i);\n            if (code > 0x7f && code <= 0x7ff) s++;\n            else if (code > 0x7ff && code <= 0xffff) s += 2;\n            if (code >= 0xdc00 && code <= 0xdfff) i--;\n        }\n        return s;\n    }\n    var BackButton = function() {\n        var isVisible = false;\n        var backButton = {};\n        Object.defineProperty(backButton, \"isVisible\", {\n            set: function(val) {\n                setParams({\n                    is_visible: val\n                });\n            },\n            get: function() {\n                return isVisible;\n            },\n            enumerable: true\n        });\n        var curButtonState = null;\n        WebView.onEvent(\"back_button_pressed\", onBackButtonPressed);\n        function onBackButtonPressed() {\n            receiveWebViewEvent(\"backButtonClicked\");\n        }\n        function buttonParams() {\n            return {\n                is_visible: isVisible\n            };\n        }\n        function buttonState(btn_params) {\n            if (typeof btn_params === \"undefined\") btn_params = buttonParams();\n            return JSON.stringify(btn_params);\n        }\n        function buttonCheckVersion() {\n            if (!versionAtLeast(\"6.1\")) {\n                console.warn(\"[Telegram.WebApp] BackButton is not supported in version \" + webAppVersion);\n                return false;\n            }\n            return true;\n        }\n        function updateButton() {\n            var btn_params = buttonParams();\n            var btn_state = buttonState(btn_params);\n            if (curButtonState === btn_state) return;\n            curButtonState = btn_state;\n            WebView.postEvent(\"web_app_setup_back_button\", false, btn_params);\n        }\n        function setParams(params) {\n            if (!buttonCheckVersion()) return backButton;\n            if (typeof params.is_visible !== \"undefined\") isVisible = !!params.is_visible;\n            updateButton();\n            return backButton;\n        }\n        backButton.onClick = function(callback) {\n            if (buttonCheckVersion()) onWebViewEvent(\"backButtonClicked\", callback);\n            return backButton;\n        };\n        backButton.offClick = function(callback) {\n            if (buttonCheckVersion()) offWebViewEvent(\"backButtonClicked\", callback);\n            return backButton;\n        };\n        backButton.show = function() {\n            return setParams({\n                is_visible: true\n            });\n        };\n        backButton.hide = function() {\n            return setParams({\n                is_visible: false\n            });\n        };\n        return backButton;\n    }();\n    var mainButtonHeight = 0;\n    var MainButton = function() {\n        var isVisible = false;\n        var isActive = true;\n        var isProgressVisible = false;\n        var buttonText = \"CONTINUE\";\n        var buttonColor = false;\n        var buttonTextColor = false;\n        var mainButton = {};\n        Object.defineProperty(mainButton, \"text\", {\n            set: function(val) {\n                mainButton.setParams({\n                    text: val\n                });\n            },\n            get: function() {\n                return buttonText;\n            },\n            enumerable: true\n        });\n        Object.defineProperty(mainButton, \"color\", {\n            set: function(val) {\n                mainButton.setParams({\n                    color: val\n                });\n            },\n            get: function() {\n                return buttonColor || themeParams.button_color || \"#2481cc\";\n            },\n            enumerable: true\n        });\n        Object.defineProperty(mainButton, \"textColor\", {\n            set: function(val) {\n                mainButton.setParams({\n                    text_color: val\n                });\n            },\n            get: function() {\n                return buttonTextColor || themeParams.button_text_color || \"#ffffff\";\n            },\n            enumerable: true\n        });\n        Object.defineProperty(mainButton, \"isVisible\", {\n            set: function(val) {\n                mainButton.setParams({\n                    is_visible: val\n                });\n            },\n            get: function() {\n                return isVisible;\n            },\n            enumerable: true\n        });\n        Object.defineProperty(mainButton, \"isProgressVisible\", {\n            get: function() {\n                return isProgressVisible;\n            },\n            enumerable: true\n        });\n        Object.defineProperty(mainButton, \"isActive\", {\n            set: function(val) {\n                mainButton.setParams({\n                    is_active: val\n                });\n            },\n            get: function() {\n                return isActive;\n            },\n            enumerable: true\n        });\n        var curButtonState = null;\n        WebView.onEvent(\"main_button_pressed\", onMainButtonPressed);\n        var debugBtn = null, debugBtnStyle = {};\n        if (initParams.tgWebAppDebug) {\n            debugBtn = document.createElement(\"tg-main-button\");\n            debugBtnStyle = {\n                font: \"600 14px/18px sans-serif\",\n                display: \"none\",\n                width: \"100%\",\n                height: \"48px\",\n                borderRadius: \"0\",\n                background: \"no-repeat right center\",\n                position: \"fixed\",\n                left: \"0\",\n                right: \"0\",\n                bottom: \"0\",\n                margin: \"0\",\n                padding: \"15px 20px\",\n                textAlign: \"center\",\n                boxSizing: \"border-box\",\n                zIndex: \"10000\"\n            };\n            for(var k in debugBtnStyle)debugBtn.style[k] = debugBtnStyle[k];\n            document.addEventListener(\"DOMContentLoaded\", function onDomLoaded(event) {\n                document.removeEventListener(\"DOMContentLoaded\", onDomLoaded);\n                document.body.appendChild(debugBtn);\n                debugBtn.addEventListener(\"click\", onMainButtonPressed, false);\n            });\n        }\n        function onMainButtonPressed() {\n            if (isActive) receiveWebViewEvent(\"mainButtonClicked\");\n        }\n        function buttonParams() {\n            var color = mainButton.color;\n            var text_color = mainButton.textColor;\n            return isVisible ? {\n                is_visible: true,\n                is_active: isActive,\n                is_progress_visible: isProgressVisible,\n                text: buttonText,\n                color: color,\n                text_color: text_color\n            } : {\n                is_visible: false\n            };\n        }\n        function buttonState(btn_params) {\n            if (typeof btn_params === \"undefined\") btn_params = buttonParams();\n            return JSON.stringify(btn_params);\n        }\n        function updateButton() {\n            var btn_params = buttonParams();\n            var btn_state = buttonState(btn_params);\n            if (curButtonState === btn_state) return;\n            curButtonState = btn_state;\n            WebView.postEvent(\"web_app_setup_main_button\", false, btn_params);\n            if (initParams.tgWebAppDebug) updateDebugButton(btn_params);\n        }\n        function updateDebugButton(btn_params) {\n            if (btn_params.is_visible) {\n                debugBtn.style.display = \"block\";\n                mainButtonHeight = 48;\n                debugBtn.style.opacity = btn_params.is_active ? \"1\" : \"0.8\";\n                debugBtn.style.cursor = btn_params.is_active ? \"pointer\" : \"auto\";\n                debugBtn.disabled = !btn_params.is_active;\n                debugBtn.innerText = btn_params.text;\n                debugBtn.style.backgroundImage = btn_params.is_progress_visible ? \"url('data:image/svg+xml,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20xmlns%3Axlink%3D%22http%3A%2F%2Fwww.w3.org%2F1999%2Fxlink%22%20viewport%3D%220%200%2048%2048%22%20width%3D%2248px%22%20height%3D%2248px%22%3E%3Ccircle%20cx%3D%2250%25%22%20cy%3D%2250%25%22%20stroke%3D%22%23fff%22%20stroke-width%3D%222.25%22%20stroke-linecap%3D%22round%22%20fill%3D%22none%22%20stroke-dashoffset%3D%22106%22%20r%3D%229%22%20stroke-dasharray%3D%2256.52%22%20rotate%3D%22-90%22%3E%3Canimate%20attributeName%3D%22stroke-dashoffset%22%20attributeType%3D%22XML%22%20dur%3D%22360s%22%20from%3D%220%22%20to%3D%2212500%22%20repeatCount%3D%22indefinite%22%3E%3C%2Fanimate%3E%3CanimateTransform%20attributeName%3D%22transform%22%20attributeType%3D%22XML%22%20type%3D%22rotate%22%20dur%3D%221s%22%20from%3D%22-90%2024%2024%22%20to%3D%22630%2024%2024%22%20repeatCount%3D%22indefinite%22%3E%3C%2FanimateTransform%3E%3C%2Fcircle%3E%3C%2Fsvg%3E')\" : \"none\";\n                debugBtn.style.backgroundColor = btn_params.color;\n                debugBtn.style.color = btn_params.text_color;\n            } else {\n                debugBtn.style.display = \"none\";\n                mainButtonHeight = 0;\n            }\n            if (document.documentElement) {\n                document.documentElement.style.boxSizing = \"border-box\";\n                document.documentElement.style.paddingBottom = mainButtonHeight + \"px\";\n            }\n            setViewportHeight();\n        }\n        function setParams(params) {\n            if (typeof params.text !== \"undefined\") {\n                var text = strTrim(params.text);\n                if (!text.length) {\n                    console.error(\"[Telegram.WebApp] Main button text is required\", params.text);\n                    throw Error(\"WebAppMainButtonParamInvalid\");\n                }\n                if (text.length > 64) {\n                    console.error(\"[Telegram.WebApp] Main button text is too long\", text);\n                    throw Error(\"WebAppMainButtonParamInvalid\");\n                }\n                buttonText = text;\n            }\n            if (typeof params.color !== \"undefined\") {\n                if (params.color === false || params.color === null) buttonColor = false;\n                else {\n                    var color = parseColorToHex(params.color);\n                    if (!color) {\n                        console.error(\"[Telegram.WebApp] Main button color format is invalid\", params.color);\n                        throw Error(\"WebAppMainButtonParamInvalid\");\n                    }\n                    buttonColor = color;\n                }\n            }\n            if (typeof params.text_color !== \"undefined\") {\n                if (params.text_color === false || params.text_color === null) buttonTextColor = false;\n                else {\n                    var text_color = parseColorToHex(params.text_color);\n                    if (!text_color) {\n                        console.error(\"[Telegram.WebApp] Main button text color format is invalid\", params.text_color);\n                        throw Error(\"WebAppMainButtonParamInvalid\");\n                    }\n                    buttonTextColor = text_color;\n                }\n            }\n            if (typeof params.is_visible !== \"undefined\") {\n                if (params.is_visible && !mainButton.text.length) {\n                    console.error(\"[Telegram.WebApp] Main button text is required\");\n                    throw Error(\"WebAppMainButtonParamInvalid\");\n                }\n                isVisible = !!params.is_visible;\n            }\n            if (typeof params.is_active !== \"undefined\") isActive = !!params.is_active;\n            updateButton();\n            return mainButton;\n        }\n        mainButton.setText = function(text) {\n            return mainButton.setParams({\n                text: text\n            });\n        };\n        mainButton.onClick = function(callback) {\n            onWebViewEvent(\"mainButtonClicked\", callback);\n            return mainButton;\n        };\n        mainButton.offClick = function(callback) {\n            offWebViewEvent(\"mainButtonClicked\", callback);\n            return mainButton;\n        };\n        mainButton.show = function() {\n            return mainButton.setParams({\n                is_visible: true\n            });\n        };\n        mainButton.hide = function() {\n            return mainButton.setParams({\n                is_visible: false\n            });\n        };\n        mainButton.enable = function() {\n            return mainButton.setParams({\n                is_active: true\n            });\n        };\n        mainButton.disable = function() {\n            return mainButton.setParams({\n                is_active: false\n            });\n        };\n        mainButton.showProgress = function(leaveActive) {\n            isActive = !!leaveActive;\n            isProgressVisible = true;\n            updateButton();\n            return mainButton;\n        };\n        mainButton.hideProgress = function() {\n            if (!mainButton.isActive) isActive = true;\n            isProgressVisible = false;\n            updateButton();\n            return mainButton;\n        };\n        mainButton.setParams = setParams;\n        return mainButton;\n    }();\n    var SettingsButton = function() {\n        var isVisible = false;\n        var settingsButton = {};\n        Object.defineProperty(settingsButton, \"isVisible\", {\n            set: function(val) {\n                setParams({\n                    is_visible: val\n                });\n            },\n            get: function() {\n                return isVisible;\n            },\n            enumerable: true\n        });\n        var curButtonState = null;\n        WebView.onEvent(\"settings_button_pressed\", onSettingsButtonPressed);\n        function onSettingsButtonPressed() {\n            receiveWebViewEvent(\"settingsButtonClicked\");\n        }\n        function buttonParams() {\n            return {\n                is_visible: isVisible\n            };\n        }\n        function buttonState(btn_params) {\n            if (typeof btn_params === \"undefined\") btn_params = buttonParams();\n            return JSON.stringify(btn_params);\n        }\n        function buttonCheckVersion() {\n            if (!versionAtLeast(\"6.10\")) {\n                console.warn(\"[Telegram.WebApp] SettingsButton is not supported in version \" + webAppVersion);\n                return false;\n            }\n            return true;\n        }\n        function updateButton() {\n            var btn_params = buttonParams();\n            var btn_state = buttonState(btn_params);\n            if (curButtonState === btn_state) return;\n            curButtonState = btn_state;\n            WebView.postEvent(\"web_app_setup_settings_button\", false, btn_params);\n        }\n        function setParams(params) {\n            if (!buttonCheckVersion()) return settingsButton;\n            if (typeof params.is_visible !== \"undefined\") isVisible = !!params.is_visible;\n            updateButton();\n            return settingsButton;\n        }\n        settingsButton.onClick = function(callback) {\n            if (buttonCheckVersion()) onWebViewEvent(\"settingsButtonClicked\", callback);\n            return settingsButton;\n        };\n        settingsButton.offClick = function(callback) {\n            if (buttonCheckVersion()) offWebViewEvent(\"settingsButtonClicked\", callback);\n            return settingsButton;\n        };\n        settingsButton.show = function() {\n            return setParams({\n                is_visible: true\n            });\n        };\n        settingsButton.hide = function() {\n            return setParams({\n                is_visible: false\n            });\n        };\n        return settingsButton;\n    }();\n    var HapticFeedback = function() {\n        var hapticFeedback = {};\n        function triggerFeedback(params) {\n            if (!versionAtLeast(\"6.1\")) {\n                console.warn(\"[Telegram.WebApp] HapticFeedback is not supported in version \" + webAppVersion);\n                return hapticFeedback;\n            }\n            if (params.type == \"impact\") {\n                if (params.impact_style != \"light\" && params.impact_style != \"medium\" && params.impact_style != \"heavy\" && params.impact_style != \"rigid\" && params.impact_style != \"soft\") {\n                    console.error(\"[Telegram.WebApp] Haptic impact style is invalid\", params.impact_style);\n                    throw Error(\"WebAppHapticImpactStyleInvalid\");\n                }\n            } else if (params.type == \"notification\") {\n                if (params.notification_type != \"error\" && params.notification_type != \"success\" && params.notification_type != \"warning\") {\n                    console.error(\"[Telegram.WebApp] Haptic notification type is invalid\", params.notification_type);\n                    throw Error(\"WebAppHapticNotificationTypeInvalid\");\n                }\n            } else if (params.type == \"selection_change\") ;\n            else {\n                console.error(\"[Telegram.WebApp] Haptic feedback type is invalid\", params.type);\n                throw Error(\"WebAppHapticFeedbackTypeInvalid\");\n            }\n            WebView.postEvent(\"web_app_trigger_haptic_feedback\", false, params);\n            return hapticFeedback;\n        }\n        hapticFeedback.impactOccurred = function(style) {\n            return triggerFeedback({\n                type: \"impact\",\n                impact_style: style\n            });\n        };\n        hapticFeedback.notificationOccurred = function(type) {\n            return triggerFeedback({\n                type: \"notification\",\n                notification_type: type\n            });\n        };\n        hapticFeedback.selectionChanged = function() {\n            return triggerFeedback({\n                type: \"selection_change\"\n            });\n        };\n        return hapticFeedback;\n    }();\n    var CloudStorage = function() {\n        var cloudStorage = {};\n        function invokeStorageMethod(method, params, callback) {\n            if (!versionAtLeast(\"6.9\")) {\n                console.error(\"[Telegram.WebApp] CloudStorage is not supported in version \" + webAppVersion);\n                throw Error(\"WebAppMethodUnsupported\");\n            }\n            invokeCustomMethod(method, params, callback);\n            return cloudStorage;\n        }\n        cloudStorage.setItem = function(key, value, callback) {\n            return invokeStorageMethod(\"saveStorageValue\", {\n                key: key,\n                value: value\n            }, callback);\n        };\n        cloudStorage.getItem = function(key, callback) {\n            return cloudStorage.getItems([\n                key\n            ], callback ? function(err, res) {\n                if (err) callback(err);\n                else callback(null, res[key]);\n            } : null);\n        };\n        cloudStorage.getItems = function(keys, callback) {\n            return invokeStorageMethod(\"getStorageValues\", {\n                keys: keys\n            }, callback);\n        };\n        cloudStorage.removeItem = function(key, callback) {\n            return cloudStorage.removeItems([\n                key\n            ], callback);\n        };\n        cloudStorage.removeItems = function(keys, callback) {\n            return invokeStorageMethod(\"deleteStorageValues\", {\n                keys: keys\n            }, callback);\n        };\n        cloudStorage.getKeys = function(callback) {\n            return invokeStorageMethod(\"getStorageKeys\", {}, callback);\n        };\n        return cloudStorage;\n    }();\n    var webAppInvoices = {};\n    function onInvoiceClosed(eventType, eventData) {\n        if (eventData.slug && webAppInvoices[eventData.slug]) {\n            var invoiceData = webAppInvoices[eventData.slug];\n            delete webAppInvoices[eventData.slug];\n            if (invoiceData.callback) invoiceData.callback(eventData.status);\n            receiveWebViewEvent(\"invoiceClosed\", {\n                url: invoiceData.url,\n                status: eventData.status\n            });\n        }\n    }\n    var webAppPopupOpened = false;\n    function onPopupClosed(eventType, eventData) {\n        if (webAppPopupOpened) {\n            var popupData = webAppPopupOpened;\n            webAppPopupOpened = false;\n            var button_id = null;\n            if (typeof eventData.button_id !== \"undefined\") button_id = eventData.button_id;\n            if (popupData.callback) popupData.callback(button_id);\n            receiveWebViewEvent(\"popupClosed\", {\n                button_id: button_id\n            });\n        }\n    }\n    var webAppScanQrPopupOpened = false;\n    function onQrTextReceived(eventType, eventData) {\n        if (webAppScanQrPopupOpened) {\n            var popupData = webAppScanQrPopupOpened;\n            var data = null;\n            if (typeof eventData.data !== \"undefined\") data = eventData.data;\n            if (popupData.callback) {\n                if (popupData.callback(data)) {\n                    webAppScanQrPopupOpened = false;\n                    WebView.postEvent(\"web_app_close_scan_qr_popup\", false);\n                }\n            }\n            receiveWebViewEvent(\"qrTextReceived\", {\n                data: data\n            });\n        }\n    }\n    function onScanQrPopupClosed(eventType, eventData) {\n        webAppScanQrPopupOpened = false;\n    }\n    function onClipboardTextReceived(eventType, eventData) {\n        if (eventData.req_id && webAppCallbacks[eventData.req_id]) {\n            var requestData = webAppCallbacks[eventData.req_id];\n            delete webAppCallbacks[eventData.req_id];\n            var data = null;\n            if (typeof eventData.data !== \"undefined\") data = eventData.data;\n            if (requestData.callback) requestData.callback(data);\n            receiveWebViewEvent(\"clipboardTextReceived\", {\n                data: data\n            });\n        }\n    }\n    var WebAppWriteAccessRequested = false;\n    function onWriteAccessRequested(eventType, eventData) {\n        if (WebAppWriteAccessRequested) {\n            var requestData = WebAppWriteAccessRequested;\n            WebAppWriteAccessRequested = false;\n            if (requestData.callback) requestData.callback(eventData.status == \"allowed\");\n            receiveWebViewEvent(\"writeAccessRequested\", {\n                status: eventData.status\n            });\n        }\n    }\n    function getRequestedContact(callback, timeout) {\n        var reqTo, fallbackTo, reqDelay = 0;\n        var reqInvoke = function() {\n            invokeCustomMethod(\"getRequestedContact\", {}, function(err, res) {\n                if (res && res.length) {\n                    clearTimeout(fallbackTo);\n                    callback(res);\n                } else {\n                    reqDelay += 50;\n                    reqTo = setTimeout(reqInvoke, reqDelay);\n                }\n            });\n        };\n        var fallbackInvoke = function() {\n            clearTimeout(reqTo);\n            callback(\"\");\n        };\n        fallbackTo = setTimeout(fallbackInvoke, timeout);\n        reqInvoke();\n    }\n    var WebAppContactRequested = false;\n    function onPhoneRequested(eventType, eventData) {\n        if (WebAppContactRequested) {\n            var requestData = WebAppContactRequested;\n            WebAppContactRequested = false;\n            var requestSent = eventData.status == \"sent\";\n            var webViewEvent = {\n                status: eventData.status\n            };\n            if (requestSent) getRequestedContact(function(res) {\n                if (res && res.length) {\n                    webViewEvent.response = res;\n                    webViewEvent.responseUnsafe = Utils.urlParseQueryString(res);\n                    for(var key in webViewEvent.responseUnsafe){\n                        var val = webViewEvent.responseUnsafe[key];\n                        try {\n                            if (val.substr(0, 1) == \"{\" && val.substr(-1) == \"}\" || val.substr(0, 1) == \"[\" && val.substr(-1) == \"]\") webViewEvent.responseUnsafe[key] = JSON.parse(val);\n                        } catch (e) {}\n                    }\n                }\n                if (requestData.callback) requestData.callback(requestSent, webViewEvent);\n                receiveWebViewEvent(\"contactRequested\", webViewEvent);\n            }, 3000);\n            else {\n                if (requestData.callback) requestData.callback(requestSent, webViewEvent);\n                receiveWebViewEvent(\"contactRequested\", webViewEvent);\n            }\n        }\n    }\n    function onCustomMethodInvoked(eventType, eventData) {\n        if (eventData.req_id && webAppCallbacks[eventData.req_id]) {\n            var requestData = webAppCallbacks[eventData.req_id];\n            delete webAppCallbacks[eventData.req_id];\n            var res = null, err = null;\n            if (typeof eventData.result !== \"undefined\") res = eventData.result;\n            if (typeof eventData.error !== \"undefined\") err = eventData.error;\n            if (requestData.callback) requestData.callback(err, res);\n        }\n    }\n    function invokeCustomMethod(method, params, callback) {\n        if (!versionAtLeast(\"6.9\")) {\n            console.error(\"[Telegram.WebApp] Method invokeCustomMethod is not supported in version \" + webAppVersion);\n            throw Error(\"WebAppMethodUnsupported\");\n        }\n        var req_id = generateCallbackId(16);\n        var req_params = {\n            req_id: req_id,\n            method: method,\n            params: params || {}\n        };\n        webAppCallbacks[req_id] = {\n            callback: callback\n        };\n        WebView.postEvent(\"web_app_invoke_custom_method\", false, req_params);\n    }\n    if (!window.Telegram) window.Telegram = {};\n    Object.defineProperty(WebApp, \"initData\", {\n        get: function() {\n            return webAppInitData;\n        },\n        enumerable: true\n    });\n    Object.defineProperty(WebApp, \"initDataUnsafe\", {\n        get: function() {\n            return webAppInitDataUnsafe;\n        },\n        enumerable: true\n    });\n    Object.defineProperty(WebApp, \"version\", {\n        get: function() {\n            return webAppVersion;\n        },\n        enumerable: true\n    });\n    Object.defineProperty(WebApp, \"platform\", {\n        get: function() {\n            return webAppPlatform;\n        },\n        enumerable: true\n    });\n    Object.defineProperty(WebApp, \"colorScheme\", {\n        get: function() {\n            return colorScheme;\n        },\n        enumerable: true\n    });\n    Object.defineProperty(WebApp, \"themeParams\", {\n        get: function() {\n            return themeParams;\n        },\n        enumerable: true\n    });\n    Object.defineProperty(WebApp, \"isExpanded\", {\n        get: function() {\n            return isExpanded;\n        },\n        enumerable: true\n    });\n    Object.defineProperty(WebApp, \"viewportHeight\", {\n        get: function() {\n            return (viewportHeight === false ? window.innerHeight : viewportHeight) - mainButtonHeight;\n        },\n        enumerable: true\n    });\n    Object.defineProperty(WebApp, \"viewportStableHeight\", {\n        get: function() {\n            return (viewportStableHeight === false ? window.innerHeight : viewportStableHeight) - mainButtonHeight;\n        },\n        enumerable: true\n    });\n    Object.defineProperty(WebApp, \"isClosingConfirmationEnabled\", {\n        set: function(val) {\n            setClosingConfirmation(val);\n        },\n        get: function() {\n            return isClosingConfirmationEnabled;\n        },\n        enumerable: true\n    });\n    Object.defineProperty(WebApp, \"headerColor\", {\n        set: function(val) {\n            setHeaderColor(val);\n        },\n        get: function() {\n            return getHeaderColor();\n        },\n        enumerable: true\n    });\n    Object.defineProperty(WebApp, \"backgroundColor\", {\n        set: function(val) {\n            setBackgroundColor(val);\n        },\n        get: function() {\n            return getBackgroundColor();\n        },\n        enumerable: true\n    });\n    Object.defineProperty(WebApp, \"BackButton\", {\n        value: BackButton,\n        enumerable: true\n    });\n    Object.defineProperty(WebApp, \"MainButton\", {\n        value: MainButton,\n        enumerable: true\n    });\n    Object.defineProperty(WebApp, \"SettingsButton\", {\n        value: SettingsButton,\n        enumerable: true\n    });\n    Object.defineProperty(WebApp, \"HapticFeedback\", {\n        value: HapticFeedback,\n        enumerable: true\n    });\n    Object.defineProperty(WebApp, \"CloudStorage\", {\n        value: CloudStorage,\n        enumerable: true\n    });\n    WebApp.setHeaderColor = function(color_key) {\n        WebApp.headerColor = color_key;\n    };\n    WebApp.setBackgroundColor = function(color) {\n        WebApp.backgroundColor = color;\n    };\n    WebApp.enableClosingConfirmation = function() {\n        WebApp.isClosingConfirmationEnabled = true;\n    };\n    WebApp.disableClosingConfirmation = function() {\n        WebApp.isClosingConfirmationEnabled = false;\n    };\n    WebApp.isVersionAtLeast = function(ver) {\n        return versionAtLeast(ver);\n    };\n    WebApp.onEvent = function(eventType, callback) {\n        onWebViewEvent(eventType, callback);\n    };\n    WebApp.offEvent = function(eventType, callback) {\n        offWebViewEvent(eventType, callback);\n    };\n    WebApp.sendData = function(data) {\n        if (!data || !data.length) {\n            console.error(\"[Telegram.WebApp] Data is required\", data);\n            throw Error(\"WebAppDataInvalid\");\n        }\n        if (byteLength(data) > 4096) {\n            console.error(\"[Telegram.WebApp] Data is too long\", data);\n            throw Error(\"WebAppDataInvalid\");\n        }\n        WebView.postEvent(\"web_app_data_send\", false, {\n            data: data\n        });\n    };\n    WebApp.switchInlineQuery = function(query, choose_chat_types) {\n        if (!versionAtLeast(\"6.6\")) {\n            console.error(\"[Telegram.WebApp] Method switchInlineQuery is not supported in version \" + webAppVersion);\n            throw Error(\"WebAppMethodUnsupported\");\n        }\n        if (!initParams.tgWebAppBotInline) {\n            console.error(\"[Telegram.WebApp] Inline mode is disabled for this bot. Read more about inline mode: https://core.telegram.org/bots/inline\");\n            throw Error(\"WebAppInlineModeDisabled\");\n        }\n        query = query || \"\";\n        if (query.length > 256) {\n            console.error(\"[Telegram.WebApp] Inline query is too long\", query);\n            throw Error(\"WebAppInlineQueryInvalid\");\n        }\n        var chat_types = [];\n        if (choose_chat_types) {\n            if (!Array.isArray(choose_chat_types)) {\n                console.error(\"[Telegram.WebApp] Choose chat types should be an array\", choose_chat_types);\n                throw Error(\"WebAppInlineChooseChatTypesInvalid\");\n            }\n            var good_types = {\n                users: 1,\n                bots: 1,\n                groups: 1,\n                channels: 1\n            };\n            for(var i = 0; i < choose_chat_types.length; i++){\n                var chat_type = choose_chat_types[i];\n                if (!good_types[chat_type]) {\n                    console.error(\"[Telegram.WebApp] Choose chat type is invalid\", chat_type);\n                    throw Error(\"WebAppInlineChooseChatTypeInvalid\");\n                }\n                if (good_types[chat_type] != 2) {\n                    good_types[chat_type] = 2;\n                    chat_types.push(chat_type);\n                }\n            }\n        }\n        WebView.postEvent(\"web_app_switch_inline_query\", false, {\n            query: query,\n            chat_types: chat_types\n        });\n    };\n    WebApp.openLink = function(url, options) {\n        var a = document.createElement(\"A\");\n        a.href = url;\n        if (a.protocol != \"http:\" && a.protocol != \"https:\") {\n            console.error(\"[Telegram.WebApp] Url protocol is not supported\", url);\n            throw Error(\"WebAppTgUrlInvalid\");\n        }\n        var url = a.href;\n        options = options || {};\n        if (versionAtLeast(\"6.1\")) WebView.postEvent(\"web_app_open_link\", false, {\n            url: url,\n            try_instant_view: versionAtLeast(\"6.4\") && !!options.try_instant_view\n        });\n        else window.open(url, \"_blank\");\n    };\n    WebApp.openTelegramLink = function(url) {\n        var a = document.createElement(\"A\");\n        a.href = url;\n        if (a.protocol != \"http:\" && a.protocol != \"https:\") {\n            console.error(\"[Telegram.WebApp] Url protocol is not supported\", url);\n            throw Error(\"WebAppTgUrlInvalid\");\n        }\n        if (a.hostname != \"t.me\") {\n            console.error(\"[Telegram.WebApp] Url host is not supported\", url);\n            throw Error(\"WebAppTgUrlInvalid\");\n        }\n        var path_full = a.pathname + a.search;\n        if (isIframe || versionAtLeast(\"6.1\")) WebView.postEvent(\"web_app_open_tg_link\", false, {\n            path_full: path_full\n        });\n        else location.href = \"https://t.me\" + path_full;\n    };\n    WebApp.openInvoice = function(url, callback) {\n        var a = document.createElement(\"A\"), match, slug;\n        a.href = url;\n        if (a.protocol != \"http:\" && a.protocol != \"https:\" || a.hostname != \"t.me\" || !(match = a.pathname.match(/^\\/(\\$|invoice\\/)([A-Za-z0-9\\-_=]+)$/)) || !(slug = match[2])) {\n            console.error(\"[Telegram.WebApp] Invoice url is invalid\", url);\n            throw Error(\"WebAppInvoiceUrlInvalid\");\n        }\n        if (!versionAtLeast(\"6.1\")) {\n            console.error(\"[Telegram.WebApp] Method openInvoice is not supported in version \" + webAppVersion);\n            throw Error(\"WebAppMethodUnsupported\");\n        }\n        if (webAppInvoices[slug]) {\n            console.error(\"[Telegram.WebApp] Invoice is already opened\");\n            throw Error(\"WebAppInvoiceOpened\");\n        }\n        webAppInvoices[slug] = {\n            url: url,\n            callback: callback\n        };\n        WebView.postEvent(\"web_app_open_invoice\", false, {\n            slug: slug\n        });\n    };\n    WebApp.showPopup = function(params, callback) {\n        if (!versionAtLeast(\"6.2\")) {\n            console.error(\"[Telegram.WebApp] Method showPopup is not supported in version \" + webAppVersion);\n            throw Error(\"WebAppMethodUnsupported\");\n        }\n        if (webAppPopupOpened) {\n            console.error(\"[Telegram.WebApp] Popup is already opened\");\n            throw Error(\"WebAppPopupOpened\");\n        }\n        var title = \"\";\n        var message = \"\";\n        var buttons = [];\n        var popup_buttons = {};\n        var popup_params = {};\n        if (typeof params.title !== \"undefined\") {\n            title = strTrim(params.title);\n            if (title.length > 64) {\n                console.error(\"[Telegram.WebApp] Popup title is too long\", title);\n                throw Error(\"WebAppPopupParamInvalid\");\n            }\n            if (title.length > 0) popup_params.title = title;\n        }\n        if (typeof params.message !== \"undefined\") message = strTrim(params.message);\n        if (!message.length) {\n            console.error(\"[Telegram.WebApp] Popup message is required\", params.message);\n            throw Error(\"WebAppPopupParamInvalid\");\n        }\n        if (message.length > 256) {\n            console.error(\"[Telegram.WebApp] Popup message is too long\", message);\n            throw Error(\"WebAppPopupParamInvalid\");\n        }\n        popup_params.message = message;\n        if (typeof params.buttons !== \"undefined\") {\n            if (!Array.isArray(params.buttons)) {\n                console.error(\"[Telegram.WebApp] Popup buttons should be an array\", params.buttons);\n                throw Error(\"WebAppPopupParamInvalid\");\n            }\n            for(var i = 0; i < params.buttons.length; i++){\n                var button = params.buttons[i];\n                var btn = {};\n                var id = \"\";\n                if (typeof button.id !== \"undefined\") {\n                    id = button.id.toString();\n                    if (id.length > 64) {\n                        console.error(\"[Telegram.WebApp] Popup button id is too long\", id);\n                        throw Error(\"WebAppPopupParamInvalid\");\n                    }\n                }\n                btn.id = id;\n                var button_type = button.type;\n                if (typeof button_type === \"undefined\") button_type = \"default\";\n                btn.type = button_type;\n                if (button_type == \"ok\" || button_type == \"close\" || button_type == \"cancel\") ;\n                else if (button_type == \"default\" || button_type == \"destructive\") {\n                    var text = \"\";\n                    if (typeof button.text !== \"undefined\") text = strTrim(button.text);\n                    if (!text.length) {\n                        console.error(\"[Telegram.WebApp] Popup button text is required for type \" + button_type, button.text);\n                        throw Error(\"WebAppPopupParamInvalid\");\n                    }\n                    if (text.length > 64) {\n                        console.error(\"[Telegram.WebApp] Popup button text is too long\", text);\n                        throw Error(\"WebAppPopupParamInvalid\");\n                    }\n                    btn.text = text;\n                } else {\n                    console.error(\"[Telegram.WebApp] Popup button type is invalid\", button_type);\n                    throw Error(\"WebAppPopupParamInvalid\");\n                }\n                buttons.push(btn);\n            }\n        } else buttons.push({\n            id: \"\",\n            type: \"close\"\n        });\n        if (buttons.length < 1) {\n            console.error(\"[Telegram.WebApp] Popup should have at least one button\");\n            throw Error(\"WebAppPopupParamInvalid\");\n        }\n        if (buttons.length > 3) {\n            console.error(\"[Telegram.WebApp] Popup should not have more than 3 buttons\");\n            throw Error(\"WebAppPopupParamInvalid\");\n        }\n        popup_params.buttons = buttons;\n        webAppPopupOpened = {\n            callback: callback\n        };\n        WebView.postEvent(\"web_app_open_popup\", false, popup_params);\n    };\n    WebApp.showAlert = function(message, callback) {\n        WebApp.showPopup({\n            message: message\n        }, callback ? function() {\n            callback();\n        } : null);\n    };\n    WebApp.showConfirm = function(message, callback) {\n        WebApp.showPopup({\n            message: message,\n            buttons: [\n                {\n                    type: \"ok\",\n                    id: \"ok\"\n                },\n                {\n                    type: \"cancel\"\n                }\n            ]\n        }, callback ? function(button_id) {\n            callback(button_id == \"ok\");\n        } : null);\n    };\n    WebApp.showScanQrPopup = function(params, callback) {\n        if (!versionAtLeast(\"6.4\")) {\n            console.error(\"[Telegram.WebApp] Method showScanQrPopup is not supported in version \" + webAppVersion);\n            throw Error(\"WebAppMethodUnsupported\");\n        }\n        if (webAppScanQrPopupOpened) {\n            console.error(\"[Telegram.WebApp] Popup is already opened\");\n            throw Error(\"WebAppScanQrPopupOpened\");\n        }\n        var text = \"\";\n        var popup_params = {};\n        if (typeof params.text !== \"undefined\") {\n            text = strTrim(params.text);\n            if (text.length > 64) {\n                console.error(\"[Telegram.WebApp] Scan QR popup text is too long\", text);\n                throw Error(\"WebAppScanQrPopupParamInvalid\");\n            }\n            if (text.length > 0) popup_params.text = text;\n        }\n        webAppScanQrPopupOpened = {\n            callback: callback\n        };\n        WebView.postEvent(\"web_app_open_scan_qr_popup\", false, popup_params);\n    };\n    WebApp.closeScanQrPopup = function() {\n        if (!versionAtLeast(\"6.4\")) {\n            console.error(\"[Telegram.WebApp] Method closeScanQrPopup is not supported in version \" + webAppVersion);\n            throw Error(\"WebAppMethodUnsupported\");\n        }\n        webAppScanQrPopupOpened = false;\n        WebView.postEvent(\"web_app_close_scan_qr_popup\", false);\n    };\n    WebApp.readTextFromClipboard = function(callback) {\n        if (!versionAtLeast(\"6.4\")) {\n            console.error(\"[Telegram.WebApp] Method readTextFromClipboard is not supported in version \" + webAppVersion);\n            throw Error(\"WebAppMethodUnsupported\");\n        }\n        var req_id = generateCallbackId(16);\n        var req_params = {\n            req_id: req_id\n        };\n        webAppCallbacks[req_id] = {\n            callback: callback\n        };\n        WebView.postEvent(\"web_app_read_text_from_clipboard\", false, req_params);\n    };\n    WebApp.requestWriteAccess = function(callback) {\n        if (!versionAtLeast(\"6.9\")) {\n            console.error(\"[Telegram.WebApp] Method requestWriteAccess is not supported in version \" + webAppVersion);\n            throw Error(\"WebAppMethodUnsupported\");\n        }\n        if (WebAppWriteAccessRequested) {\n            console.error(\"[Telegram.WebApp] Write access is already requested\");\n            throw Error(\"WebAppWriteAccessRequested\");\n        }\n        WebAppWriteAccessRequested = {\n            callback: callback\n        };\n        WebView.postEvent(\"web_app_request_write_access\");\n    };\n    WebApp.requestContact = function(callback) {\n        if (!versionAtLeast(\"6.9\")) {\n            console.error(\"[Telegram.WebApp] Method requestContact is not supported in version \" + webAppVersion);\n            throw Error(\"WebAppMethodUnsupported\");\n        }\n        if (WebAppContactRequested) {\n            console.error(\"[Telegram.WebApp] Contact is already requested\");\n            throw Error(\"WebAppContactRequested\");\n        }\n        WebAppContactRequested = {\n            callback: callback\n        };\n        WebView.postEvent(\"web_app_request_phone\");\n    };\n    WebApp.invokeCustomMethod = function(method, params, callback) {\n        invokeCustomMethod(method, params, callback);\n    };\n    WebApp.ready = function() {\n        WebView.postEvent(\"web_app_ready\");\n    };\n    WebApp.expand = function() {\n        WebView.postEvent(\"web_app_expand\");\n    };\n    WebApp.close = function() {\n        WebView.postEvent(\"web_app_close\");\n    };\n    window.Telegram.WebApp = WebApp;\n    updateHeaderColor();\n    updateBackgroundColor();\n    setViewportHeight();\n    if (initParams.tgWebAppShowSettings) SettingsButton.show();\n    window.addEventListener(\"resize\", onWindowResize);\n    if (isIframe) document.addEventListener(\"click\", linkHandler);\n    WebView.onEvent(\"theme_changed\", onThemeChanged);\n    WebView.onEvent(\"viewport_changed\", onViewportChanged);\n    WebView.onEvent(\"invoice_closed\", onInvoiceClosed);\n    WebView.onEvent(\"popup_closed\", onPopupClosed);\n    WebView.onEvent(\"qr_text_received\", onQrTextReceived);\n    WebView.onEvent(\"scan_qr_popup_closed\", onScanQrPopupClosed);\n    WebView.onEvent(\"clipboard_text_received\", onClipboardTextReceived);\n    WebView.onEvent(\"write_access_requested\", onWriteAccessRequested);\n    WebView.onEvent(\"phone_requested\", onPhoneRequested);\n    WebView.onEvent(\"custom_method_invoked\", onCustomMethodInvoked);\n    WebView.postEvent(\"web_app_request_theme\");\n    WebView.postEvent(\"web_app_request_viewport\");\n})();\n\n\nvar $b98eaee7c212cfa1$var$telegramWindow = window;\n$b98eaee7c212cfa1$exports.WebApp = $b98eaee7c212cfa1$var$telegramWindow.Telegram.WebApp;\n\n\n$abccaeccf2464339$exports.default = $b98eaee7c212cfa1$exports.WebApp;\n\n\n\n(0, (/*@__PURE__*/$parcel$interopDefault($abccaeccf2464339$exports))).showAlert((0, (/*@__PURE__*/$parcel$interopDefault($abccaeccf2464339$exports))).initData);\n(0, (/*@__PURE__*/$parcel$interopDefault($abccaeccf2464339$exports))).viewportHeight = 100;\n(0, (/*@__PURE__*/$parcel$interopDefault($abccaeccf2464339$exports))).MainButton.show();\n(0, (/*@__PURE__*/$parcel$interopDefault($abccaeccf2464339$exports))).MainButton.setText(\"main\");\n(0, (/*@__PURE__*/$parcel$interopDefault($abccaeccf2464339$exports))).MainButton.onClick(function() {\n    (0, (/*@__PURE__*/$parcel$interopDefault($abccaeccf2464339$exports))).showAlert(\"MainButton\");\n});\n(0, (/*@__PURE__*/$parcel$interopDefault($abccaeccf2464339$exports))).BackButton.show();\n(0, (/*@__PURE__*/$parcel$interopDefault($abccaeccf2464339$exports))).BackButton.onClick(function() {\n    (0, (/*@__PURE__*/$parcel$interopDefault($abccaeccf2464339$exports))).showAlert(\"BackButton\");\n});\n(0, (/*@__PURE__*/$parcel$interopDefault($abccaeccf2464339$exports))).SettingsButton.show().onClick(function() {\n    (0, (/*@__PURE__*/$parcel$interopDefault($abccaeccf2464339$exports))).showAlert(\"SettingsButton\");\n});\n(0, (/*@__PURE__*/$parcel$interopDefault($abccaeccf2464339$exports))).ready();\n(0, (/*@__PURE__*/$parcel$interopDefault($abccaeccf2464339$exports))).backgroundColor = \"#00ffff\";\n(0, (/*@__PURE__*/$parcel$interopDefault($abccaeccf2464339$exports))).expand();\n(0, (/*@__PURE__*/$parcel$interopDefault($abccaeccf2464339$exports))).requestContact(function() {\n    (0, (/*@__PURE__*/$parcel$interopDefault($abccaeccf2464339$exports))).showAlert(\"requestContact\");\n});\n\n\n//# sourceMappingURL=index.a793076d.js.map\n","import WebApp from '@twa-dev/sdk'\r\nimport \"./styles.less\"\r\n\r\nWebApp.showAlert(WebApp.initData);\r\n\r\nWebApp.viewportHeight = 100;\r\n\r\nWebApp.MainButton.show();\r\nWebApp.MainButton.setText(\"main\");\r\nWebApp.MainButton.onClick(() => {\r\n    WebApp.showAlert(\"MainButton\");\r\n});\r\n\r\nWebApp.BackButton.show();\r\nWebApp.BackButton.onClick(() => {\r\n    WebApp.showAlert(\"BackButton\");\r\n});\r\n\r\nWebApp.SettingsButton.show().onClick(() => {\r\n    WebApp.showAlert(\"SettingsButton\");\r\n});\r\n\r\nWebApp.ready();\r\n\r\nWebApp.backgroundColor = \"#00ffff\";\r\n\r\nWebApp.expand();\r\n\r\nWebApp.requestContact(()=>{ WebApp.showAlert(\"requestContact\"); });","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar sdk_1 = require(\"./sdk\");\nexports.default = sdk_1.WebApp;\n//# sourceMappingURL=index.js.map",null,"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.WebApp = void 0;\nrequire(\"./telegram-web-apps\");\nvar telegramWindow = window;\nexports.WebApp = telegramWindow.Telegram.WebApp;\n//# sourceMappingURL=sdk.js.map",null,"\"use strict\";\n// WebView\n(function () {\n    var eventHandlers = {};\n    var locationHash = '';\n    try {\n        locationHash = location.hash.toString();\n    }\n    catch (e) { }\n    var initParams = urlParseHashParams(locationHash);\n    var storedParams = sessionStorageGet('initParams');\n    if (storedParams) {\n        for (var key in storedParams) {\n            if (typeof initParams[key] === 'undefined') {\n                initParams[key] = storedParams[key];\n            }\n        }\n    }\n    sessionStorageSet('initParams', initParams);\n    var isIframe = false, iFrameStyle;\n    try {\n        isIframe = (window.parent != null && window != window.parent);\n        if (isIframe) {\n            window.addEventListener('message', function (event) {\n                if (event.source !== window.parent)\n                    return;\n                try {\n                    var dataParsed = JSON.parse(event.data);\n                }\n                catch (e) {\n                    return;\n                }\n                if (!dataParsed || !dataParsed.eventType) {\n                    return;\n                }\n                if (dataParsed.eventType == 'set_custom_style') {\n                    if (event.origin === 'https://web.telegram.org') {\n                        iFrameStyle.innerHTML = dataParsed.eventData;\n                    }\n                }\n                else if (dataParsed.eventType == 'reload_iframe') {\n                    try {\n                        window.parent.postMessage(JSON.stringify({ eventType: 'iframe_will_reload' }), '*');\n                    }\n                    catch (e) { }\n                    location.reload();\n                }\n                else {\n                    receiveEvent(dataParsed.eventType, dataParsed.eventData);\n                }\n            });\n            iFrameStyle = document.createElement('style');\n            document.head.appendChild(iFrameStyle);\n            try {\n                window.parent.postMessage(JSON.stringify({ eventType: 'iframe_ready', eventData: { reload_supported: true } }), '*');\n            }\n            catch (e) { }\n        }\n    }\n    catch (e) { }\n    function urlSafeDecode(urlencoded) {\n        try {\n            urlencoded = urlencoded.replace(/\\+/g, '%20');\n            return decodeURIComponent(urlencoded);\n        }\n        catch (e) {\n            return urlencoded;\n        }\n    }\n    function urlParseHashParams(locationHash) {\n        locationHash = locationHash.replace(/^#/, '');\n        var params = {};\n        if (!locationHash.length) {\n            return params;\n        }\n        if (locationHash.indexOf('=') < 0 && locationHash.indexOf('?') < 0) {\n            params._path = urlSafeDecode(locationHash);\n            return params;\n        }\n        var qIndex = locationHash.indexOf('?');\n        if (qIndex >= 0) {\n            var pathParam = locationHash.substr(0, qIndex);\n            params._path = urlSafeDecode(pathParam);\n            locationHash = locationHash.substr(qIndex + 1);\n        }\n        var query_params = urlParseQueryString(locationHash);\n        for (var k in query_params) {\n            params[k] = query_params[k];\n        }\n        return params;\n    }\n    function urlParseQueryString(queryString) {\n        var params = {};\n        if (!queryString.length) {\n            return params;\n        }\n        var queryStringParams = queryString.split('&');\n        var i, param, paramName, paramValue;\n        for (i = 0; i < queryStringParams.length; i++) {\n            param = queryStringParams[i].split('=');\n            paramName = urlSafeDecode(param[0]);\n            paramValue = param[1] == null ? null : urlSafeDecode(param[1]);\n            params[paramName] = paramValue;\n        }\n        return params;\n    }\n    // Telegram apps will implement this logic to add service params (e.g. tgShareScoreUrl) to game URL\n    function urlAppendHashParams(url, addHash) {\n        // url looks like 'https://game.com/path?query=1#hash'\n        // addHash looks like 'tgShareScoreUrl=' + encodeURIComponent('tgb://share_game_score?hash=very_long_hash123')\n        var ind = url.indexOf('#');\n        if (ind < 0) {\n            // https://game.com/path -> https://game.com/path#tgShareScoreUrl=etc\n            return url + '#' + addHash;\n        }\n        var curHash = url.substr(ind + 1);\n        if (curHash.indexOf('=') >= 0 || curHash.indexOf('?') >= 0) {\n            // https://game.com/#hash=1 -> https://game.com/#hash=1&tgShareScoreUrl=etc\n            // https://game.com/#path?query -> https://game.com/#path?query&tgShareScoreUrl=etc\n            return url + '&' + addHash;\n        }\n        // https://game.com/#hash -> https://game.com/#hash?tgShareScoreUrl=etc\n        if (curHash.length > 0) {\n            return url + '?' + addHash;\n        }\n        // https://game.com/# -> https://game.com/#tgShareScoreUrl=etc\n        return url + addHash;\n    }\n    function postEvent(eventType, callback, eventData) {\n        if (!callback) {\n            callback = function () { };\n        }\n        if (eventData === undefined) {\n            eventData = '';\n        }\n        console.log('[Telegram.WebView] > postEvent', eventType, eventData);\n        if (window.TelegramWebviewProxy !== undefined) {\n            TelegramWebviewProxy.postEvent(eventType, JSON.stringify(eventData));\n            callback();\n        }\n        else if (window.external && 'notify' in window.external) {\n            window.external.notify(JSON.stringify({ eventType: eventType, eventData: eventData }));\n            callback();\n        }\n        else if (isIframe) {\n            try {\n                var trustedTarget = 'https://web.telegram.org';\n                // For now we don't restrict target, for testing purposes\n                trustedTarget = '*';\n                window.parent.postMessage(JSON.stringify({ eventType: eventType, eventData: eventData }), trustedTarget);\n                callback();\n            }\n            catch (e) {\n                callback(e);\n            }\n        }\n        else {\n            callback({ notAvailable: true });\n        }\n    }\n    ;\n    function receiveEvent(eventType, eventData) {\n        console.log('[Telegram.WebView] < receiveEvent', eventType, eventData);\n        callEventCallbacks(eventType, function (callback) {\n            callback(eventType, eventData);\n        });\n    }\n    function callEventCallbacks(eventType, func) {\n        var curEventHandlers = eventHandlers[eventType];\n        if (curEventHandlers === undefined ||\n            !curEventHandlers.length) {\n            return;\n        }\n        for (var i = 0; i < curEventHandlers.length; i++) {\n            try {\n                func(curEventHandlers[i]);\n            }\n            catch (e) { }\n        }\n    }\n    function onEvent(eventType, callback) {\n        if (eventHandlers[eventType] === undefined) {\n            eventHandlers[eventType] = [];\n        }\n        var index = eventHandlers[eventType].indexOf(callback);\n        if (index === -1) {\n            eventHandlers[eventType].push(callback);\n        }\n    }\n    ;\n    function offEvent(eventType, callback) {\n        if (eventHandlers[eventType] === undefined) {\n            return;\n        }\n        var index = eventHandlers[eventType].indexOf(callback);\n        if (index === -1) {\n            return;\n        }\n        eventHandlers[eventType].splice(index, 1);\n    }\n    ;\n    function openProtoUrl(url) {\n        if (!url.match(/^(web\\+)?tgb?:\\/\\/./)) {\n            return false;\n        }\n        var useIframe = navigator.userAgent.match(/iOS|iPhone OS|iPhone|iPod|iPad/i) ? true : false;\n        if (useIframe) {\n            var iframeContEl = document.getElementById('tgme_frame_cont') || document.body;\n            var iframeEl = document.createElement('iframe');\n            iframeContEl.appendChild(iframeEl);\n            var pageHidden = false;\n            var enableHidden = function () {\n                pageHidden = true;\n            };\n            window.addEventListener('pagehide', enableHidden, false);\n            window.addEventListener('blur', enableHidden, false);\n            if (iframeEl !== null) {\n                iframeEl.src = url;\n            }\n            setTimeout(function () {\n                if (!pageHidden) {\n                    window.location = url;\n                }\n                window.removeEventListener('pagehide', enableHidden, false);\n                window.removeEventListener('blur', enableHidden, false);\n            }, 2000);\n        }\n        else {\n            window.location = url;\n        }\n        return true;\n    }\n    function sessionStorageSet(key, value) {\n        try {\n            window.sessionStorage.setItem('__telegram__' + key, JSON.stringify(value));\n            return true;\n        }\n        catch (e) { }\n        return false;\n    }\n    function sessionStorageGet(key) {\n        try {\n            return JSON.parse(window.sessionStorage.getItem('__telegram__' + key));\n        }\n        catch (e) { }\n        return null;\n    }\n    if (!window.Telegram) {\n        window.Telegram = {};\n    }\n    window.Telegram.WebView = {\n        initParams: initParams,\n        isIframe: isIframe,\n        onEvent: onEvent,\n        offEvent: offEvent,\n        postEvent: postEvent,\n        receiveEvent: receiveEvent,\n        callEventCallbacks: callEventCallbacks\n    };\n    window.Telegram.Utils = {\n        urlSafeDecode: urlSafeDecode,\n        urlParseQueryString: urlParseQueryString,\n        urlParseHashParams: urlParseHashParams,\n        urlAppendHashParams: urlAppendHashParams,\n        sessionStorageSet: sessionStorageSet,\n        sessionStorageGet: sessionStorageGet\n    };\n    // For Windows Phone app\n    window.TelegramGameProxy_receiveEvent = receiveEvent;\n    // App backward compatibility\n    window.TelegramGameProxy = {\n        receiveEvent: receiveEvent\n    };\n})();\n// WebApp\n(function () {\n    var Utils = window.Telegram.Utils;\n    var WebView = window.Telegram.WebView;\n    var initParams = WebView.initParams;\n    var isIframe = WebView.isIframe;\n    var WebApp = {};\n    var webAppInitData = '', webAppInitDataUnsafe = {};\n    var themeParams = {}, colorScheme = 'light';\n    var webAppVersion = '6.0';\n    var webAppPlatform = 'unknown';\n    if (initParams.tgWebAppData && initParams.tgWebAppData.length) {\n        webAppInitData = initParams.tgWebAppData;\n        webAppInitDataUnsafe = Utils.urlParseQueryString(webAppInitData);\n        for (var key in webAppInitDataUnsafe) {\n            var val = webAppInitDataUnsafe[key];\n            try {\n                if (val.substr(0, 1) == '{' && val.substr(-1) == '}' ||\n                    val.substr(0, 1) == '[' && val.substr(-1) == ']') {\n                    webAppInitDataUnsafe[key] = JSON.parse(val);\n                }\n            }\n            catch (e) { }\n        }\n    }\n    if (initParams.tgWebAppThemeParams && initParams.tgWebAppThemeParams.length) {\n        var themeParamsRaw = initParams.tgWebAppThemeParams;\n        try {\n            var theme_params = JSON.parse(themeParamsRaw);\n            if (theme_params) {\n                setThemeParams(theme_params);\n            }\n        }\n        catch (e) { }\n    }\n    var theme_params = Utils.sessionStorageGet('themeParams');\n    if (theme_params) {\n        setThemeParams(theme_params);\n    }\n    if (initParams.tgWebAppVersion) {\n        webAppVersion = initParams.tgWebAppVersion;\n    }\n    if (initParams.tgWebAppPlatform) {\n        webAppPlatform = initParams.tgWebAppPlatform;\n    }\n    function onThemeChanged(eventType, eventData) {\n        if (eventData.theme_params) {\n            setThemeParams(eventData.theme_params);\n            window.Telegram.WebApp.MainButton.setParams({});\n            updateBackgroundColor();\n            receiveWebViewEvent('themeChanged');\n        }\n    }\n    var lastWindowHeight = window.innerHeight;\n    function onViewportChanged(eventType, eventData) {\n        if (eventData.height) {\n            window.removeEventListener('resize', onWindowResize);\n            setViewportHeight(eventData);\n        }\n    }\n    function onWindowResize(e) {\n        if (lastWindowHeight != window.innerHeight) {\n            lastWindowHeight = window.innerHeight;\n            receiveWebViewEvent('viewportChanged', {\n                isStateStable: true\n            });\n        }\n    }\n    function linkHandler(e) {\n        if (e.metaKey || e.ctrlKey)\n            return;\n        var el = e.target;\n        while (el.tagName != 'A' && el.parentNode) {\n            el = el.parentNode;\n        }\n        if (el.tagName == 'A' &&\n            el.target != '_blank' &&\n            (el.protocol == 'http:' || el.protocol == 'https:') &&\n            el.hostname == 't.me') {\n            WebApp.openTgLink(el.href);\n            e.preventDefault();\n        }\n    }\n    function strTrim(str) {\n        return str.toString().replace(/^\\s+|\\s+$/g, '');\n    }\n    function receiveWebViewEvent(eventType) {\n        var args = Array.prototype.slice.call(arguments);\n        eventType = args.shift();\n        WebView.callEventCallbacks('webview:' + eventType, function (callback) {\n            callback.apply(WebApp, args);\n        });\n    }\n    function onWebViewEvent(eventType, callback) {\n        WebView.onEvent('webview:' + eventType, callback);\n    }\n    ;\n    function offWebViewEvent(eventType, callback) {\n        WebView.offEvent('webview:' + eventType, callback);\n    }\n    ;\n    function setCssProperty(name, value) {\n        var root = document.documentElement;\n        if (root && root.style && root.style.setProperty) {\n            root.style.setProperty('--tg-' + name, value);\n        }\n    }\n    function setThemeParams(theme_params) {\n        // temp iOS fix\n        if (theme_params.bg_color == '#1c1c1d' &&\n            theme_params.bg_color == theme_params.secondary_bg_color) {\n            theme_params.secondary_bg_color = '#2c2c2e';\n        }\n        var color;\n        for (var key in theme_params) {\n            if (color = parseColorToHex(theme_params[key])) {\n                themeParams[key] = color;\n                if (key == 'bg_color') {\n                    colorScheme = isColorDark(color) ? 'dark' : 'light';\n                    setCssProperty('color-scheme', colorScheme);\n                }\n                key = 'theme-' + key.split('_').join('-');\n                setCssProperty(key, color);\n            }\n        }\n        Utils.sessionStorageSet('themeParams', themeParams);\n    }\n    var webAppCallbacks = {};\n    function generateCallbackId(len) {\n        var tries = 100;\n        while (--tries) {\n            var id = '', chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789', chars_len = chars.length;\n            for (var i = 0; i < len; i++) {\n                id += chars[Math.floor(Math.random() * chars_len)];\n            }\n            if (!webAppCallbacks[id]) {\n                webAppCallbacks[id] = {};\n                return id;\n            }\n        }\n        throw Error('WebAppCallbackIdGenerateFailed');\n    }\n    var viewportHeight = false, viewportStableHeight = false, isExpanded = true;\n    function setViewportHeight(data) {\n        if (typeof data !== 'undefined') {\n            isExpanded = !!data.is_expanded;\n            viewportHeight = data.height;\n            if (data.is_state_stable) {\n                viewportStableHeight = data.height;\n            }\n            receiveWebViewEvent('viewportChanged', {\n                isStateStable: !!data.is_state_stable\n            });\n        }\n        var height, stable_height;\n        if (viewportHeight !== false) {\n            height = (viewportHeight - mainButtonHeight) + 'px';\n        }\n        else {\n            height = mainButtonHeight ? 'calc(100vh - ' + mainButtonHeight + 'px)' : '100vh';\n        }\n        if (viewportStableHeight !== false) {\n            stable_height = (viewportStableHeight - mainButtonHeight) + 'px';\n        }\n        else {\n            stable_height = mainButtonHeight ? 'calc(100vh - ' + mainButtonHeight + 'px)' : '100vh';\n        }\n        setCssProperty('viewport-height', height);\n        setCssProperty('viewport-stable-height', stable_height);\n    }\n    var isClosingConfirmationEnabled = false;\n    function setClosingConfirmation(need_confirmation) {\n        if (!versionAtLeast('6.2')) {\n            console.warn('[Telegram.WebApp] Closing confirmation is not supported in version ' + webAppVersion);\n            return;\n        }\n        isClosingConfirmationEnabled = !!need_confirmation;\n        WebView.postEvent('web_app_setup_closing_behavior', false, { need_confirmation: isClosingConfirmationEnabled });\n    }\n    var headerColorKey = 'bg_color', headerColor = null;\n    function getHeaderColor() {\n        if (headerColorKey == 'secondary_bg_color') {\n            return themeParams.secondary_bg_color;\n        }\n        else if (headerColorKey == 'bg_color') {\n            return themeParams.bg_color;\n        }\n        return headerColor;\n    }\n    function setHeaderColor(color) {\n        if (!versionAtLeast('6.1')) {\n            console.warn('[Telegram.WebApp] Header color is not supported in version ' + webAppVersion);\n            return;\n        }\n        if (!versionAtLeast('6.9')) {\n            if (themeParams.bg_color &&\n                themeParams.bg_color == color) {\n                color = 'bg_color';\n            }\n            else if (themeParams.secondary_bg_color &&\n                themeParams.secondary_bg_color == color) {\n                color = 'secondary_bg_color';\n            }\n        }\n        var head_color = null, color_key = null;\n        if (color == 'bg_color' || color == 'secondary_bg_color') {\n            color_key = color;\n        }\n        else if (versionAtLeast('6.9')) {\n            head_color = parseColorToHex(color);\n            if (!head_color) {\n                console.error('[Telegram.WebApp] Header color format is invalid', color);\n                throw Error('WebAppHeaderColorInvalid');\n            }\n        }\n        if (!versionAtLeast('6.9') &&\n            color_key != 'bg_color' &&\n            color_key != 'secondary_bg_color') {\n            console.error('[Telegram.WebApp] Header color key should be one of Telegram.WebApp.themeParams.bg_color, Telegram.WebApp.themeParams.secondary_bg_color, \\'bg_color\\', \\'secondary_bg_color\\'', color);\n            throw Error('WebAppHeaderColorKeyInvalid');\n        }\n        headerColorKey = color_key;\n        headerColor = head_color;\n        updateHeaderColor();\n    }\n    var appHeaderColorKey = null, appHeaderColor = null;\n    function updateHeaderColor() {\n        if (appHeaderColorKey != headerColorKey ||\n            appHeaderColor != headerColor) {\n            appHeaderColorKey = headerColorKey;\n            appHeaderColor = headerColor;\n            if (appHeaderColor) {\n                WebView.postEvent('web_app_set_header_color', false, { color: headerColor });\n            }\n            else {\n                WebView.postEvent('web_app_set_header_color', false, { color_key: headerColorKey });\n            }\n        }\n    }\n    var backgroundColor = 'bg_color';\n    function getBackgroundColor() {\n        if (backgroundColor == 'secondary_bg_color') {\n            return themeParams.secondary_bg_color;\n        }\n        else if (backgroundColor == 'bg_color') {\n            return themeParams.bg_color;\n        }\n        return backgroundColor;\n    }\n    function setBackgroundColor(color) {\n        if (!versionAtLeast('6.1')) {\n            console.warn('[Telegram.WebApp] Background color is not supported in version ' + webAppVersion);\n            return;\n        }\n        var bg_color;\n        if (color == 'bg_color' || color == 'secondary_bg_color') {\n            bg_color = color;\n        }\n        else {\n            bg_color = parseColorToHex(color);\n            if (!bg_color) {\n                console.error('[Telegram.WebApp] Background color format is invalid', color);\n                throw Error('WebAppBackgroundColorInvalid');\n            }\n        }\n        backgroundColor = bg_color;\n        updateBackgroundColor();\n    }\n    var appBackgroundColor = null;\n    function updateBackgroundColor() {\n        var color = getBackgroundColor();\n        if (appBackgroundColor != color) {\n            appBackgroundColor = color;\n            WebView.postEvent('web_app_set_background_color', false, { color: color });\n        }\n    }\n    function parseColorToHex(color) {\n        color += '';\n        var match;\n        if (match = /^\\s*#([0-9a-f]{6})\\s*$/i.exec(color)) {\n            return '#' + match[1].toLowerCase();\n        }\n        else if (match = /^\\s*#([0-9a-f])([0-9a-f])([0-9a-f])\\s*$/i.exec(color)) {\n            return ('#' + match[1] + match[1] + match[2] + match[2] + match[3] + match[3]).toLowerCase();\n        }\n        else if (match = /^\\s*rgba?\\((\\d+),\\s*(\\d+),\\s*(\\d+)(?:,\\s*(\\d+\\.{0,1}\\d*))?\\)\\s*$/.exec(color)) {\n            var r = parseInt(match[1]), g = parseInt(match[2]), b = parseInt(match[3]);\n            r = (r < 16 ? '0' : '') + r.toString(16);\n            g = (g < 16 ? '0' : '') + g.toString(16);\n            b = (b < 16 ? '0' : '') + b.toString(16);\n            return '#' + r + g + b;\n        }\n        return false;\n    }\n    function isColorDark(rgb) {\n        rgb = rgb.replace(/[\\s#]/g, '');\n        if (rgb.length == 3) {\n            rgb = rgb[0] + rgb[0] + rgb[1] + rgb[1] + rgb[2] + rgb[2];\n        }\n        var r = parseInt(rgb.substr(0, 2), 16);\n        var g = parseInt(rgb.substr(2, 2), 16);\n        var b = parseInt(rgb.substr(4, 2), 16);\n        var hsp = Math.sqrt(0.299 * (r * r) + 0.587 * (g * g) + 0.114 * (b * b));\n        return hsp < 120;\n    }\n    function versionCompare(v1, v2) {\n        if (typeof v1 !== 'string')\n            v1 = '';\n        if (typeof v2 !== 'string')\n            v2 = '';\n        v1 = v1.replace(/^\\s+|\\s+$/g, '').split('.');\n        v2 = v2.replace(/^\\s+|\\s+$/g, '').split('.');\n        var a = Math.max(v1.length, v2.length), i, p1, p2;\n        for (i = 0; i < a; i++) {\n            p1 = parseInt(v1[i]) || 0;\n            p2 = parseInt(v2[i]) || 0;\n            if (p1 == p2)\n                continue;\n            if (p1 > p2)\n                return 1;\n            return -1;\n        }\n        return 0;\n    }\n    function versionAtLeast(ver) {\n        return versionCompare(webAppVersion, ver) >= 0;\n    }\n    function byteLength(str) {\n        if (window.Blob) {\n            try {\n                return new Blob([str]).size;\n            }\n            catch (e) { }\n        }\n        var s = str.length;\n        for (var i = str.length - 1; i >= 0; i--) {\n            var code = str.charCodeAt(i);\n            if (code > 0x7f && code <= 0x7ff)\n                s++;\n            else if (code > 0x7ff && code <= 0xffff)\n                s += 2;\n            if (code >= 0xdc00 && code <= 0xdfff)\n                i--;\n        }\n        return s;\n    }\n    var BackButton = (function () {\n        var isVisible = false;\n        var backButton = {};\n        Object.defineProperty(backButton, 'isVisible', {\n            set: function (val) { setParams({ is_visible: val }); },\n            get: function () { return isVisible; },\n            enumerable: true\n        });\n        var curButtonState = null;\n        WebView.onEvent('back_button_pressed', onBackButtonPressed);\n        function onBackButtonPressed() {\n            receiveWebViewEvent('backButtonClicked');\n        }\n        function buttonParams() {\n            return { is_visible: isVisible };\n        }\n        function buttonState(btn_params) {\n            if (typeof btn_params === 'undefined') {\n                btn_params = buttonParams();\n            }\n            return JSON.stringify(btn_params);\n        }\n        function buttonCheckVersion() {\n            if (!versionAtLeast('6.1')) {\n                console.warn('[Telegram.WebApp] BackButton is not supported in version ' + webAppVersion);\n                return false;\n            }\n            return true;\n        }\n        function updateButton() {\n            var btn_params = buttonParams();\n            var btn_state = buttonState(btn_params);\n            if (curButtonState === btn_state) {\n                return;\n            }\n            curButtonState = btn_state;\n            WebView.postEvent('web_app_setup_back_button', false, btn_params);\n        }\n        function setParams(params) {\n            if (!buttonCheckVersion()) {\n                return backButton;\n            }\n            if (typeof params.is_visible !== 'undefined') {\n                isVisible = !!params.is_visible;\n            }\n            updateButton();\n            return backButton;\n        }\n        backButton.onClick = function (callback) {\n            if (buttonCheckVersion()) {\n                onWebViewEvent('backButtonClicked', callback);\n            }\n            return backButton;\n        };\n        backButton.offClick = function (callback) {\n            if (buttonCheckVersion()) {\n                offWebViewEvent('backButtonClicked', callback);\n            }\n            return backButton;\n        };\n        backButton.show = function () {\n            return setParams({ is_visible: true });\n        };\n        backButton.hide = function () {\n            return setParams({ is_visible: false });\n        };\n        return backButton;\n    })();\n    var mainButtonHeight = 0;\n    var MainButton = (function () {\n        var isVisible = false;\n        var isActive = true;\n        var isProgressVisible = false;\n        var buttonText = 'CONTINUE';\n        var buttonColor = false;\n        var buttonTextColor = false;\n        var mainButton = {};\n        Object.defineProperty(mainButton, 'text', {\n            set: function (val) { mainButton.setParams({ text: val }); },\n            get: function () { return buttonText; },\n            enumerable: true\n        });\n        Object.defineProperty(mainButton, 'color', {\n            set: function (val) { mainButton.setParams({ color: val }); },\n            get: function () { return buttonColor || themeParams.button_color || '#2481cc'; },\n            enumerable: true\n        });\n        Object.defineProperty(mainButton, 'textColor', {\n            set: function (val) { mainButton.setParams({ text_color: val }); },\n            get: function () { return buttonTextColor || themeParams.button_text_color || '#ffffff'; },\n            enumerable: true\n        });\n        Object.defineProperty(mainButton, 'isVisible', {\n            set: function (val) { mainButton.setParams({ is_visible: val }); },\n            get: function () { return isVisible; },\n            enumerable: true\n        });\n        Object.defineProperty(mainButton, 'isProgressVisible', {\n            get: function () { return isProgressVisible; },\n            enumerable: true\n        });\n        Object.defineProperty(mainButton, 'isActive', {\n            set: function (val) { mainButton.setParams({ is_active: val }); },\n            get: function () { return isActive; },\n            enumerable: true\n        });\n        var curButtonState = null;\n        WebView.onEvent('main_button_pressed', onMainButtonPressed);\n        var debugBtn = null, debugBtnStyle = {};\n        if (initParams.tgWebAppDebug) {\n            debugBtn = document.createElement('tg-main-button');\n            debugBtnStyle = {\n                font: '600 14px/18px sans-serif',\n                display: 'none',\n                width: '100%',\n                height: '48px',\n                borderRadius: '0',\n                background: 'no-repeat right center',\n                position: 'fixed',\n                left: '0',\n                right: '0',\n                bottom: '0',\n                margin: '0',\n                padding: '15px 20px',\n                textAlign: 'center',\n                boxSizing: 'border-box',\n                zIndex: '10000'\n            };\n            for (var k in debugBtnStyle) {\n                debugBtn.style[k] = debugBtnStyle[k];\n            }\n            document.addEventListener('DOMContentLoaded', function onDomLoaded(event) {\n                document.removeEventListener('DOMContentLoaded', onDomLoaded);\n                document.body.appendChild(debugBtn);\n                debugBtn.addEventListener('click', onMainButtonPressed, false);\n            });\n        }\n        function onMainButtonPressed() {\n            if (isActive) {\n                receiveWebViewEvent('mainButtonClicked');\n            }\n        }\n        function buttonParams() {\n            var color = mainButton.color;\n            var text_color = mainButton.textColor;\n            return isVisible ? {\n                is_visible: true,\n                is_active: isActive,\n                is_progress_visible: isProgressVisible,\n                text: buttonText,\n                color: color,\n                text_color: text_color\n            } : { is_visible: false };\n        }\n        function buttonState(btn_params) {\n            if (typeof btn_params === 'undefined') {\n                btn_params = buttonParams();\n            }\n            return JSON.stringify(btn_params);\n        }\n        function updateButton() {\n            var btn_params = buttonParams();\n            var btn_state = buttonState(btn_params);\n            if (curButtonState === btn_state) {\n                return;\n            }\n            curButtonState = btn_state;\n            WebView.postEvent('web_app_setup_main_button', false, btn_params);\n            if (initParams.tgWebAppDebug) {\n                updateDebugButton(btn_params);\n            }\n        }\n        function updateDebugButton(btn_params) {\n            if (btn_params.is_visible) {\n                debugBtn.style.display = 'block';\n                mainButtonHeight = 48;\n                debugBtn.style.opacity = btn_params.is_active ? '1' : '0.8';\n                debugBtn.style.cursor = btn_params.is_active ? 'pointer' : 'auto';\n                debugBtn.disabled = !btn_params.is_active;\n                debugBtn.innerText = btn_params.text;\n                debugBtn.style.backgroundImage = btn_params.is_progress_visible ? \"url('data:image/svg+xml,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20xmlns%3Axlink%3D%22http%3A%2F%2Fwww.w3.org%2F1999%2Fxlink%22%20viewport%3D%220%200%2048%2048%22%20width%3D%2248px%22%20height%3D%2248px%22%3E%3Ccircle%20cx%3D%2250%25%22%20cy%3D%2250%25%22%20stroke%3D%22%23fff%22%20stroke-width%3D%222.25%22%20stroke-linecap%3D%22round%22%20fill%3D%22none%22%20stroke-dashoffset%3D%22106%22%20r%3D%229%22%20stroke-dasharray%3D%2256.52%22%20rotate%3D%22-90%22%3E%3Canimate%20attributeName%3D%22stroke-dashoffset%22%20attributeType%3D%22XML%22%20dur%3D%22360s%22%20from%3D%220%22%20to%3D%2212500%22%20repeatCount%3D%22indefinite%22%3E%3C%2Fanimate%3E%3CanimateTransform%20attributeName%3D%22transform%22%20attributeType%3D%22XML%22%20type%3D%22rotate%22%20dur%3D%221s%22%20from%3D%22-90%2024%2024%22%20to%3D%22630%2024%2024%22%20repeatCount%3D%22indefinite%22%3E%3C%2FanimateTransform%3E%3C%2Fcircle%3E%3C%2Fsvg%3E')\" : 'none';\n                debugBtn.style.backgroundColor = btn_params.color;\n                debugBtn.style.color = btn_params.text_color;\n            }\n            else {\n                debugBtn.style.display = 'none';\n                mainButtonHeight = 0;\n            }\n            if (document.documentElement) {\n                document.documentElement.style.boxSizing = 'border-box';\n                document.documentElement.style.paddingBottom = mainButtonHeight + 'px';\n            }\n            setViewportHeight();\n        }\n        function setParams(params) {\n            if (typeof params.text !== 'undefined') {\n                var text = strTrim(params.text);\n                if (!text.length) {\n                    console.error('[Telegram.WebApp] Main button text is required', params.text);\n                    throw Error('WebAppMainButtonParamInvalid');\n                }\n                if (text.length > 64) {\n                    console.error('[Telegram.WebApp] Main button text is too long', text);\n                    throw Error('WebAppMainButtonParamInvalid');\n                }\n                buttonText = text;\n            }\n            if (typeof params.color !== 'undefined') {\n                if (params.color === false ||\n                    params.color === null) {\n                    buttonColor = false;\n                }\n                else {\n                    var color = parseColorToHex(params.color);\n                    if (!color) {\n                        console.error('[Telegram.WebApp] Main button color format is invalid', params.color);\n                        throw Error('WebAppMainButtonParamInvalid');\n                    }\n                    buttonColor = color;\n                }\n            }\n            if (typeof params.text_color !== 'undefined') {\n                if (params.text_color === false ||\n                    params.text_color === null) {\n                    buttonTextColor = false;\n                }\n                else {\n                    var text_color = parseColorToHex(params.text_color);\n                    if (!text_color) {\n                        console.error('[Telegram.WebApp] Main button text color format is invalid', params.text_color);\n                        throw Error('WebAppMainButtonParamInvalid');\n                    }\n                    buttonTextColor = text_color;\n                }\n            }\n            if (typeof params.is_visible !== 'undefined') {\n                if (params.is_visible &&\n                    !mainButton.text.length) {\n                    console.error('[Telegram.WebApp] Main button text is required');\n                    throw Error('WebAppMainButtonParamInvalid');\n                }\n                isVisible = !!params.is_visible;\n            }\n            if (typeof params.is_active !== 'undefined') {\n                isActive = !!params.is_active;\n            }\n            updateButton();\n            return mainButton;\n        }\n        mainButton.setText = function (text) {\n            return mainButton.setParams({ text: text });\n        };\n        mainButton.onClick = function (callback) {\n            onWebViewEvent('mainButtonClicked', callback);\n            return mainButton;\n        };\n        mainButton.offClick = function (callback) {\n            offWebViewEvent('mainButtonClicked', callback);\n            return mainButton;\n        };\n        mainButton.show = function () {\n            return mainButton.setParams({ is_visible: true });\n        };\n        mainButton.hide = function () {\n            return mainButton.setParams({ is_visible: false });\n        };\n        mainButton.enable = function () {\n            return mainButton.setParams({ is_active: true });\n        };\n        mainButton.disable = function () {\n            return mainButton.setParams({ is_active: false });\n        };\n        mainButton.showProgress = function (leaveActive) {\n            isActive = !!leaveActive;\n            isProgressVisible = true;\n            updateButton();\n            return mainButton;\n        };\n        mainButton.hideProgress = function () {\n            if (!mainButton.isActive) {\n                isActive = true;\n            }\n            isProgressVisible = false;\n            updateButton();\n            return mainButton;\n        };\n        mainButton.setParams = setParams;\n        return mainButton;\n    })();\n    var SettingsButton = (function () {\n        var isVisible = false;\n        var settingsButton = {};\n        Object.defineProperty(settingsButton, 'isVisible', {\n            set: function (val) { setParams({ is_visible: val }); },\n            get: function () { return isVisible; },\n            enumerable: true\n        });\n        var curButtonState = null;\n        WebView.onEvent('settings_button_pressed', onSettingsButtonPressed);\n        function onSettingsButtonPressed() {\n            receiveWebViewEvent('settingsButtonClicked');\n        }\n        function buttonParams() {\n            return { is_visible: isVisible };\n        }\n        function buttonState(btn_params) {\n            if (typeof btn_params === 'undefined') {\n                btn_params = buttonParams();\n            }\n            return JSON.stringify(btn_params);\n        }\n        function buttonCheckVersion() {\n            if (!versionAtLeast('6.10')) {\n                console.warn('[Telegram.WebApp] SettingsButton is not supported in version ' + webAppVersion);\n                return false;\n            }\n            return true;\n        }\n        function updateButton() {\n            var btn_params = buttonParams();\n            var btn_state = buttonState(btn_params);\n            if (curButtonState === btn_state) {\n                return;\n            }\n            curButtonState = btn_state;\n            WebView.postEvent('web_app_setup_settings_button', false, btn_params);\n        }\n        function setParams(params) {\n            if (!buttonCheckVersion()) {\n                return settingsButton;\n            }\n            if (typeof params.is_visible !== 'undefined') {\n                isVisible = !!params.is_visible;\n            }\n            updateButton();\n            return settingsButton;\n        }\n        settingsButton.onClick = function (callback) {\n            if (buttonCheckVersion()) {\n                onWebViewEvent('settingsButtonClicked', callback);\n            }\n            return settingsButton;\n        };\n        settingsButton.offClick = function (callback) {\n            if (buttonCheckVersion()) {\n                offWebViewEvent('settingsButtonClicked', callback);\n            }\n            return settingsButton;\n        };\n        settingsButton.show = function () {\n            return setParams({ is_visible: true });\n        };\n        settingsButton.hide = function () {\n            return setParams({ is_visible: false });\n        };\n        return settingsButton;\n    })();\n    var HapticFeedback = (function () {\n        var hapticFeedback = {};\n        function triggerFeedback(params) {\n            if (!versionAtLeast('6.1')) {\n                console.warn('[Telegram.WebApp] HapticFeedback is not supported in version ' + webAppVersion);\n                return hapticFeedback;\n            }\n            if (params.type == 'impact') {\n                if (params.impact_style != 'light' &&\n                    params.impact_style != 'medium' &&\n                    params.impact_style != 'heavy' &&\n                    params.impact_style != 'rigid' &&\n                    params.impact_style != 'soft') {\n                    console.error('[Telegram.WebApp] Haptic impact style is invalid', params.impact_style);\n                    throw Error('WebAppHapticImpactStyleInvalid');\n                }\n            }\n            else if (params.type == 'notification') {\n                if (params.notification_type != 'error' &&\n                    params.notification_type != 'success' &&\n                    params.notification_type != 'warning') {\n                    console.error('[Telegram.WebApp] Haptic notification type is invalid', params.notification_type);\n                    throw Error('WebAppHapticNotificationTypeInvalid');\n                }\n            }\n            else if (params.type == 'selection_change') {\n                // no params needed\n            }\n            else {\n                console.error('[Telegram.WebApp] Haptic feedback type is invalid', params.type);\n                throw Error('WebAppHapticFeedbackTypeInvalid');\n            }\n            WebView.postEvent('web_app_trigger_haptic_feedback', false, params);\n            return hapticFeedback;\n        }\n        hapticFeedback.impactOccurred = function (style) {\n            return triggerFeedback({ type: 'impact', impact_style: style });\n        };\n        hapticFeedback.notificationOccurred = function (type) {\n            return triggerFeedback({ type: 'notification', notification_type: type });\n        };\n        hapticFeedback.selectionChanged = function () {\n            return triggerFeedback({ type: 'selection_change' });\n        };\n        return hapticFeedback;\n    })();\n    var CloudStorage = (function () {\n        var cloudStorage = {};\n        function invokeStorageMethod(method, params, callback) {\n            if (!versionAtLeast('6.9')) {\n                console.error('[Telegram.WebApp] CloudStorage is not supported in version ' + webAppVersion);\n                throw Error('WebAppMethodUnsupported');\n            }\n            invokeCustomMethod(method, params, callback);\n            return cloudStorage;\n        }\n        cloudStorage.setItem = function (key, value, callback) {\n            return invokeStorageMethod('saveStorageValue', { key: key, value: value }, callback);\n        };\n        cloudStorage.getItem = function (key, callback) {\n            return cloudStorage.getItems([key], callback ? function (err, res) {\n                if (err)\n                    callback(err);\n                else\n                    callback(null, res[key]);\n            } : null);\n        };\n        cloudStorage.getItems = function (keys, callback) {\n            return invokeStorageMethod('getStorageValues', { keys: keys }, callback);\n        };\n        cloudStorage.removeItem = function (key, callback) {\n            return cloudStorage.removeItems([key], callback);\n        };\n        cloudStorage.removeItems = function (keys, callback) {\n            return invokeStorageMethod('deleteStorageValues', { keys: keys }, callback);\n        };\n        cloudStorage.getKeys = function (callback) {\n            return invokeStorageMethod('getStorageKeys', {}, callback);\n        };\n        return cloudStorage;\n    })();\n    var webAppInvoices = {};\n    function onInvoiceClosed(eventType, eventData) {\n        if (eventData.slug && webAppInvoices[eventData.slug]) {\n            var invoiceData = webAppInvoices[eventData.slug];\n            delete webAppInvoices[eventData.slug];\n            if (invoiceData.callback) {\n                invoiceData.callback(eventData.status);\n            }\n            receiveWebViewEvent('invoiceClosed', {\n                url: invoiceData.url,\n                status: eventData.status\n            });\n        }\n    }\n    var webAppPopupOpened = false;\n    function onPopupClosed(eventType, eventData) {\n        if (webAppPopupOpened) {\n            var popupData = webAppPopupOpened;\n            webAppPopupOpened = false;\n            var button_id = null;\n            if (typeof eventData.button_id !== 'undefined') {\n                button_id = eventData.button_id;\n            }\n            if (popupData.callback) {\n                popupData.callback(button_id);\n            }\n            receiveWebViewEvent('popupClosed', {\n                button_id: button_id\n            });\n        }\n    }\n    var webAppScanQrPopupOpened = false;\n    function onQrTextReceived(eventType, eventData) {\n        if (webAppScanQrPopupOpened) {\n            var popupData = webAppScanQrPopupOpened;\n            var data = null;\n            if (typeof eventData.data !== 'undefined') {\n                data = eventData.data;\n            }\n            if (popupData.callback) {\n                if (popupData.callback(data)) {\n                    webAppScanQrPopupOpened = false;\n                    WebView.postEvent('web_app_close_scan_qr_popup', false);\n                }\n            }\n            receiveWebViewEvent('qrTextReceived', {\n                data: data\n            });\n        }\n    }\n    function onScanQrPopupClosed(eventType, eventData) {\n        webAppScanQrPopupOpened = false;\n    }\n    function onClipboardTextReceived(eventType, eventData) {\n        if (eventData.req_id && webAppCallbacks[eventData.req_id]) {\n            var requestData = webAppCallbacks[eventData.req_id];\n            delete webAppCallbacks[eventData.req_id];\n            var data = null;\n            if (typeof eventData.data !== 'undefined') {\n                data = eventData.data;\n            }\n            if (requestData.callback) {\n                requestData.callback(data);\n            }\n            receiveWebViewEvent('clipboardTextReceived', {\n                data: data\n            });\n        }\n    }\n    var WebAppWriteAccessRequested = false;\n    function onWriteAccessRequested(eventType, eventData) {\n        if (WebAppWriteAccessRequested) {\n            var requestData = WebAppWriteAccessRequested;\n            WebAppWriteAccessRequested = false;\n            if (requestData.callback) {\n                requestData.callback(eventData.status == 'allowed');\n            }\n            receiveWebViewEvent('writeAccessRequested', {\n                status: eventData.status\n            });\n        }\n    }\n    function getRequestedContact(callback, timeout) {\n        var reqTo, fallbackTo, reqDelay = 0;\n        var reqInvoke = function () {\n            invokeCustomMethod('getRequestedContact', {}, function (err, res) {\n                if (res && res.length) {\n                    clearTimeout(fallbackTo);\n                    callback(res);\n                }\n                else {\n                    reqDelay += 50;\n                    reqTo = setTimeout(reqInvoke, reqDelay);\n                }\n            });\n        };\n        var fallbackInvoke = function () {\n            clearTimeout(reqTo);\n            callback('');\n        };\n        fallbackTo = setTimeout(fallbackInvoke, timeout);\n        reqInvoke();\n    }\n    var WebAppContactRequested = false;\n    function onPhoneRequested(eventType, eventData) {\n        if (WebAppContactRequested) {\n            var requestData = WebAppContactRequested;\n            WebAppContactRequested = false;\n            var requestSent = eventData.status == 'sent';\n            var webViewEvent = {\n                status: eventData.status\n            };\n            if (requestSent) {\n                getRequestedContact(function (res) {\n                    if (res && res.length) {\n                        webViewEvent.response = res;\n                        webViewEvent.responseUnsafe = Utils.urlParseQueryString(res);\n                        for (var key in webViewEvent.responseUnsafe) {\n                            var val = webViewEvent.responseUnsafe[key];\n                            try {\n                                if (val.substr(0, 1) == '{' && val.substr(-1) == '}' ||\n                                    val.substr(0, 1) == '[' && val.substr(-1) == ']') {\n                                    webViewEvent.responseUnsafe[key] = JSON.parse(val);\n                                }\n                            }\n                            catch (e) { }\n                        }\n                    }\n                    if (requestData.callback) {\n                        requestData.callback(requestSent, webViewEvent);\n                    }\n                    receiveWebViewEvent('contactRequested', webViewEvent);\n                }, 3000);\n            }\n            else {\n                if (requestData.callback) {\n                    requestData.callback(requestSent, webViewEvent);\n                }\n                receiveWebViewEvent('contactRequested', webViewEvent);\n            }\n        }\n    }\n    function onCustomMethodInvoked(eventType, eventData) {\n        if (eventData.req_id && webAppCallbacks[eventData.req_id]) {\n            var requestData = webAppCallbacks[eventData.req_id];\n            delete webAppCallbacks[eventData.req_id];\n            var res = null, err = null;\n            if (typeof eventData.result !== 'undefined') {\n                res = eventData.result;\n            }\n            if (typeof eventData.error !== 'undefined') {\n                err = eventData.error;\n            }\n            if (requestData.callback) {\n                requestData.callback(err, res);\n            }\n        }\n    }\n    function invokeCustomMethod(method, params, callback) {\n        if (!versionAtLeast('6.9')) {\n            console.error('[Telegram.WebApp] Method invokeCustomMethod is not supported in version ' + webAppVersion);\n            throw Error('WebAppMethodUnsupported');\n        }\n        var req_id = generateCallbackId(16);\n        var req_params = { req_id: req_id, method: method, params: params || {} };\n        webAppCallbacks[req_id] = {\n            callback: callback\n        };\n        WebView.postEvent('web_app_invoke_custom_method', false, req_params);\n    }\n    ;\n    if (!window.Telegram) {\n        window.Telegram = {};\n    }\n    Object.defineProperty(WebApp, 'initData', {\n        get: function () { return webAppInitData; },\n        enumerable: true\n    });\n    Object.defineProperty(WebApp, 'initDataUnsafe', {\n        get: function () { return webAppInitDataUnsafe; },\n        enumerable: true\n    });\n    Object.defineProperty(WebApp, 'version', {\n        get: function () { return webAppVersion; },\n        enumerable: true\n    });\n    Object.defineProperty(WebApp, 'platform', {\n        get: function () { return webAppPlatform; },\n        enumerable: true\n    });\n    Object.defineProperty(WebApp, 'colorScheme', {\n        get: function () { return colorScheme; },\n        enumerable: true\n    });\n    Object.defineProperty(WebApp, 'themeParams', {\n        get: function () { return themeParams; },\n        enumerable: true\n    });\n    Object.defineProperty(WebApp, 'isExpanded', {\n        get: function () { return isExpanded; },\n        enumerable: true\n    });\n    Object.defineProperty(WebApp, 'viewportHeight', {\n        get: function () { return (viewportHeight === false ? window.innerHeight : viewportHeight) - mainButtonHeight; },\n        enumerable: true\n    });\n    Object.defineProperty(WebApp, 'viewportStableHeight', {\n        get: function () { return (viewportStableHeight === false ? window.innerHeight : viewportStableHeight) - mainButtonHeight; },\n        enumerable: true\n    });\n    Object.defineProperty(WebApp, 'isClosingConfirmationEnabled', {\n        set: function (val) { setClosingConfirmation(val); },\n        get: function () { return isClosingConfirmationEnabled; },\n        enumerable: true\n    });\n    Object.defineProperty(WebApp, 'headerColor', {\n        set: function (val) { setHeaderColor(val); },\n        get: function () { return getHeaderColor(); },\n        enumerable: true\n    });\n    Object.defineProperty(WebApp, 'backgroundColor', {\n        set: function (val) { setBackgroundColor(val); },\n        get: function () { return getBackgroundColor(); },\n        enumerable: true\n    });\n    Object.defineProperty(WebApp, 'BackButton', {\n        value: BackButton,\n        enumerable: true\n    });\n    Object.defineProperty(WebApp, 'MainButton', {\n        value: MainButton,\n        enumerable: true\n    });\n    Object.defineProperty(WebApp, 'SettingsButton', {\n        value: SettingsButton,\n        enumerable: true\n    });\n    Object.defineProperty(WebApp, 'HapticFeedback', {\n        value: HapticFeedback,\n        enumerable: true\n    });\n    Object.defineProperty(WebApp, 'CloudStorage', {\n        value: CloudStorage,\n        enumerable: true\n    });\n    WebApp.setHeaderColor = function (color_key) {\n        WebApp.headerColor = color_key;\n    };\n    WebApp.setBackgroundColor = function (color) {\n        WebApp.backgroundColor = color;\n    };\n    WebApp.enableClosingConfirmation = function () {\n        WebApp.isClosingConfirmationEnabled = true;\n    };\n    WebApp.disableClosingConfirmation = function () {\n        WebApp.isClosingConfirmationEnabled = false;\n    };\n    WebApp.isVersionAtLeast = function (ver) {\n        return versionAtLeast(ver);\n    };\n    WebApp.onEvent = function (eventType, callback) {\n        onWebViewEvent(eventType, callback);\n    };\n    WebApp.offEvent = function (eventType, callback) {\n        offWebViewEvent(eventType, callback);\n    };\n    WebApp.sendData = function (data) {\n        if (!data || !data.length) {\n            console.error('[Telegram.WebApp] Data is required', data);\n            throw Error('WebAppDataInvalid');\n        }\n        if (byteLength(data) > 4096) {\n            console.error('[Telegram.WebApp] Data is too long', data);\n            throw Error('WebAppDataInvalid');\n        }\n        WebView.postEvent('web_app_data_send', false, { data: data });\n    };\n    WebApp.switchInlineQuery = function (query, choose_chat_types) {\n        if (!versionAtLeast('6.6')) {\n            console.error('[Telegram.WebApp] Method switchInlineQuery is not supported in version ' + webAppVersion);\n            throw Error('WebAppMethodUnsupported');\n        }\n        if (!initParams.tgWebAppBotInline) {\n            console.error('[Telegram.WebApp] Inline mode is disabled for this bot. Read more about inline mode: https://core.telegram.org/bots/inline');\n            throw Error('WebAppInlineModeDisabled');\n        }\n        query = query || '';\n        if (query.length > 256) {\n            console.error('[Telegram.WebApp] Inline query is too long', query);\n            throw Error('WebAppInlineQueryInvalid');\n        }\n        var chat_types = [];\n        if (choose_chat_types) {\n            if (!Array.isArray(choose_chat_types)) {\n                console.error('[Telegram.WebApp] Choose chat types should be an array', choose_chat_types);\n                throw Error('WebAppInlineChooseChatTypesInvalid');\n            }\n            var good_types = { users: 1, bots: 1, groups: 1, channels: 1 };\n            for (var i = 0; i < choose_chat_types.length; i++) {\n                var chat_type = choose_chat_types[i];\n                if (!good_types[chat_type]) {\n                    console.error('[Telegram.WebApp] Choose chat type is invalid', chat_type);\n                    throw Error('WebAppInlineChooseChatTypeInvalid');\n                }\n                if (good_types[chat_type] != 2) {\n                    good_types[chat_type] = 2;\n                    chat_types.push(chat_type);\n                }\n            }\n        }\n        WebView.postEvent('web_app_switch_inline_query', false, { query: query, chat_types: chat_types });\n    };\n    WebApp.openLink = function (url, options) {\n        var a = document.createElement('A');\n        a.href = url;\n        if (a.protocol != 'http:' &&\n            a.protocol != 'https:') {\n            console.error('[Telegram.WebApp] Url protocol is not supported', url);\n            throw Error('WebAppTgUrlInvalid');\n        }\n        var url = a.href;\n        options = options || {};\n        if (versionAtLeast('6.1')) {\n            WebView.postEvent('web_app_open_link', false, { url: url, try_instant_view: versionAtLeast('6.4') && !!options.try_instant_view });\n        }\n        else {\n            window.open(url, '_blank');\n        }\n    };\n    WebApp.openTelegramLink = function (url) {\n        var a = document.createElement('A');\n        a.href = url;\n        if (a.protocol != 'http:' &&\n            a.protocol != 'https:') {\n            console.error('[Telegram.WebApp] Url protocol is not supported', url);\n            throw Error('WebAppTgUrlInvalid');\n        }\n        if (a.hostname != 't.me') {\n            console.error('[Telegram.WebApp] Url host is not supported', url);\n            throw Error('WebAppTgUrlInvalid');\n        }\n        var path_full = a.pathname + a.search;\n        if (isIframe || versionAtLeast('6.1')) {\n            WebView.postEvent('web_app_open_tg_link', false, { path_full: path_full });\n        }\n        else {\n            location.href = 'https://t.me' + path_full;\n        }\n    };\n    WebApp.openInvoice = function (url, callback) {\n        var a = document.createElement('A'), match, slug;\n        a.href = url;\n        if (a.protocol != 'http:' &&\n            a.protocol != 'https:' ||\n            a.hostname != 't.me' ||\n            !(match = a.pathname.match(/^\\/(\\$|invoice\\/)([A-Za-z0-9\\-_=]+)$/)) ||\n            !(slug = match[2])) {\n            console.error('[Telegram.WebApp] Invoice url is invalid', url);\n            throw Error('WebAppInvoiceUrlInvalid');\n        }\n        if (!versionAtLeast('6.1')) {\n            console.error('[Telegram.WebApp] Method openInvoice is not supported in version ' + webAppVersion);\n            throw Error('WebAppMethodUnsupported');\n        }\n        if (webAppInvoices[slug]) {\n            console.error('[Telegram.WebApp] Invoice is already opened');\n            throw Error('WebAppInvoiceOpened');\n        }\n        webAppInvoices[slug] = {\n            url: url,\n            callback: callback\n        };\n        WebView.postEvent('web_app_open_invoice', false, { slug: slug });\n    };\n    WebApp.showPopup = function (params, callback) {\n        if (!versionAtLeast('6.2')) {\n            console.error('[Telegram.WebApp] Method showPopup is not supported in version ' + webAppVersion);\n            throw Error('WebAppMethodUnsupported');\n        }\n        if (webAppPopupOpened) {\n            console.error('[Telegram.WebApp] Popup is already opened');\n            throw Error('WebAppPopupOpened');\n        }\n        var title = '';\n        var message = '';\n        var buttons = [];\n        var popup_buttons = {};\n        var popup_params = {};\n        if (typeof params.title !== 'undefined') {\n            title = strTrim(params.title);\n            if (title.length > 64) {\n                console.error('[Telegram.WebApp] Popup title is too long', title);\n                throw Error('WebAppPopupParamInvalid');\n            }\n            if (title.length > 0) {\n                popup_params.title = title;\n            }\n        }\n        if (typeof params.message !== 'undefined') {\n            message = strTrim(params.message);\n        }\n        if (!message.length) {\n            console.error('[Telegram.WebApp] Popup message is required', params.message);\n            throw Error('WebAppPopupParamInvalid');\n        }\n        if (message.length > 256) {\n            console.error('[Telegram.WebApp] Popup message is too long', message);\n            throw Error('WebAppPopupParamInvalid');\n        }\n        popup_params.message = message;\n        if (typeof params.buttons !== 'undefined') {\n            if (!Array.isArray(params.buttons)) {\n                console.error('[Telegram.WebApp] Popup buttons should be an array', params.buttons);\n                throw Error('WebAppPopupParamInvalid');\n            }\n            for (var i = 0; i < params.buttons.length; i++) {\n                var button = params.buttons[i];\n                var btn = {};\n                var id = '';\n                if (typeof button.id !== 'undefined') {\n                    id = button.id.toString();\n                    if (id.length > 64) {\n                        console.error('[Telegram.WebApp] Popup button id is too long', id);\n                        throw Error('WebAppPopupParamInvalid');\n                    }\n                }\n                btn.id = id;\n                var button_type = button.type;\n                if (typeof button_type === 'undefined') {\n                    button_type = 'default';\n                }\n                btn.type = button_type;\n                if (button_type == 'ok' ||\n                    button_type == 'close' ||\n                    button_type == 'cancel') {\n                    // no params needed\n                }\n                else if (button_type == 'default' ||\n                    button_type == 'destructive') {\n                    var text = '';\n                    if (typeof button.text !== 'undefined') {\n                        text = strTrim(button.text);\n                    }\n                    if (!text.length) {\n                        console.error('[Telegram.WebApp] Popup button text is required for type ' + button_type, button.text);\n                        throw Error('WebAppPopupParamInvalid');\n                    }\n                    if (text.length > 64) {\n                        console.error('[Telegram.WebApp] Popup button text is too long', text);\n                        throw Error('WebAppPopupParamInvalid');\n                    }\n                    btn.text = text;\n                }\n                else {\n                    console.error('[Telegram.WebApp] Popup button type is invalid', button_type);\n                    throw Error('WebAppPopupParamInvalid');\n                }\n                buttons.push(btn);\n            }\n        }\n        else {\n            buttons.push({ id: '', type: 'close' });\n        }\n        if (buttons.length < 1) {\n            console.error('[Telegram.WebApp] Popup should have at least one button');\n            throw Error('WebAppPopupParamInvalid');\n        }\n        if (buttons.length > 3) {\n            console.error('[Telegram.WebApp] Popup should not have more than 3 buttons');\n            throw Error('WebAppPopupParamInvalid');\n        }\n        popup_params.buttons = buttons;\n        webAppPopupOpened = {\n            callback: callback\n        };\n        WebView.postEvent('web_app_open_popup', false, popup_params);\n    };\n    WebApp.showAlert = function (message, callback) {\n        WebApp.showPopup({\n            message: message\n        }, callback ? function () { callback(); } : null);\n    };\n    WebApp.showConfirm = function (message, callback) {\n        WebApp.showPopup({\n            message: message,\n            buttons: [\n                { type: 'ok', id: 'ok' },\n                { type: 'cancel' }\n            ]\n        }, callback ? function (button_id) {\n            callback(button_id == 'ok');\n        } : null);\n    };\n    WebApp.showScanQrPopup = function (params, callback) {\n        if (!versionAtLeast('6.4')) {\n            console.error('[Telegram.WebApp] Method showScanQrPopup is not supported in version ' + webAppVersion);\n            throw Error('WebAppMethodUnsupported');\n        }\n        if (webAppScanQrPopupOpened) {\n            console.error('[Telegram.WebApp] Popup is already opened');\n            throw Error('WebAppScanQrPopupOpened');\n        }\n        var text = '';\n        var popup_params = {};\n        if (typeof params.text !== 'undefined') {\n            text = strTrim(params.text);\n            if (text.length > 64) {\n                console.error('[Telegram.WebApp] Scan QR popup text is too long', text);\n                throw Error('WebAppScanQrPopupParamInvalid');\n            }\n            if (text.length > 0) {\n                popup_params.text = text;\n            }\n        }\n        webAppScanQrPopupOpened = {\n            callback: callback\n        };\n        WebView.postEvent('web_app_open_scan_qr_popup', false, popup_params);\n    };\n    WebApp.closeScanQrPopup = function () {\n        if (!versionAtLeast('6.4')) {\n            console.error('[Telegram.WebApp] Method closeScanQrPopup is not supported in version ' + webAppVersion);\n            throw Error('WebAppMethodUnsupported');\n        }\n        webAppScanQrPopupOpened = false;\n        WebView.postEvent('web_app_close_scan_qr_popup', false);\n    };\n    WebApp.readTextFromClipboard = function (callback) {\n        if (!versionAtLeast('6.4')) {\n            console.error('[Telegram.WebApp] Method readTextFromClipboard is not supported in version ' + webAppVersion);\n            throw Error('WebAppMethodUnsupported');\n        }\n        var req_id = generateCallbackId(16);\n        var req_params = { req_id: req_id };\n        webAppCallbacks[req_id] = {\n            callback: callback\n        };\n        WebView.postEvent('web_app_read_text_from_clipboard', false, req_params);\n    };\n    WebApp.requestWriteAccess = function (callback) {\n        if (!versionAtLeast('6.9')) {\n            console.error('[Telegram.WebApp] Method requestWriteAccess is not supported in version ' + webAppVersion);\n            throw Error('WebAppMethodUnsupported');\n        }\n        if (WebAppWriteAccessRequested) {\n            console.error('[Telegram.WebApp] Write access is already requested');\n            throw Error('WebAppWriteAccessRequested');\n        }\n        WebAppWriteAccessRequested = {\n            callback: callback\n        };\n        WebView.postEvent('web_app_request_write_access');\n    };\n    WebApp.requestContact = function (callback) {\n        if (!versionAtLeast('6.9')) {\n            console.error('[Telegram.WebApp] Method requestContact is not supported in version ' + webAppVersion);\n            throw Error('WebAppMethodUnsupported');\n        }\n        if (WebAppContactRequested) {\n            console.error('[Telegram.WebApp] Contact is already requested');\n            throw Error('WebAppContactRequested');\n        }\n        WebAppContactRequested = {\n            callback: callback\n        };\n        WebView.postEvent('web_app_request_phone');\n    };\n    WebApp.invokeCustomMethod = function (method, params, callback) {\n        invokeCustomMethod(method, params, callback);\n    };\n    WebApp.ready = function () {\n        WebView.postEvent('web_app_ready');\n    };\n    WebApp.expand = function () {\n        WebView.postEvent('web_app_expand');\n    };\n    WebApp.close = function () {\n        WebView.postEvent('web_app_close');\n    };\n    window.Telegram.WebApp = WebApp;\n    updateHeaderColor();\n    updateBackgroundColor();\n    setViewportHeight();\n    if (initParams.tgWebAppShowSettings) {\n        SettingsButton.show();\n    }\n    window.addEventListener('resize', onWindowResize);\n    if (isIframe) {\n        document.addEventListener('click', linkHandler);\n    }\n    WebView.onEvent('theme_changed', onThemeChanged);\n    WebView.onEvent('viewport_changed', onViewportChanged);\n    WebView.onEvent('invoice_closed', onInvoiceClosed);\n    WebView.onEvent('popup_closed', onPopupClosed);\n    WebView.onEvent('qr_text_received', onQrTextReceived);\n    WebView.onEvent('scan_qr_popup_closed', onScanQrPopupClosed);\n    WebView.onEvent('clipboard_text_received', onClipboardTextReceived);\n    WebView.onEvent('write_access_requested', onWriteAccessRequested);\n    WebView.onEvent('phone_requested', onPhoneRequested);\n    WebView.onEvent('custom_method_invoked', onCustomMethodInvoked);\n    WebView.postEvent('web_app_request_theme');\n    WebView.postEvent('web_app_request_viewport');\n})();\n//# sourceMappingURL=telegram-web-apps.js.map",null],"names":["$parcel$interopDefault","a","__esModule","default","$abccaeccf2464339$exports","Object","defineProperty","value","$b98eaee7c212cfa1$exports","WebApp","eventHandlers","locationHash","location","hash","toString","e","initParams","urlParseHashParams","storedParams","sessionStorageGet","key","sessionStorageSet","iFrameStyle","isIframe","window","parent","addEventListener","event","source","dataParsed","JSON","parse","data","eventType","origin","innerHTML","eventData","postMessage","stringify","reload","receiveEvent","document","createElement","head","appendChild","reload_supported","urlSafeDecode","urlencoded","replace","decodeURIComponent","params","length","indexOf","_path","qIndex","pathParam","substr","query_params","urlParseQueryString","k","queryString","i","param","paramName","paramValue","queryStringParams","split","console","log","callEventCallbacks","callback","func","curEventHandlers","undefined","sessionStorage","setItem","getItem","Telegram","WebView","onEvent","push","offEvent","index","splice","postEvent","TelegramWebviewProxy","external","notify","trustedTarget","notAvailable","Utils","urlAppendHashParams","url","addHash","ind","curHash","TelegramGameProxy_receiveEvent","TelegramGameProxy","webAppInitData","webAppInitDataUnsafe","themeParams","colorScheme","webAppVersion","webAppPlatform","tgWebAppData","val","tgWebAppThemeParams","themeParamsRaw","theme_params","setThemeParams","tgWebAppVersion","tgWebAppPlatform","lastWindowHeight","innerHeight","onWindowResize","receiveWebViewEvent","isStateStable","strTrim","str","args","Array","prototype","slice","call","arguments","shift","apply","onWebViewEvent","offWebViewEvent","setCssProperty","name","root","documentElement","style","setProperty","color","bg_color","secondary_bg_color","parseColorToHex","isColorDark","rgb","r","parseInt","g","b","hsp","Math","sqrt","join","webAppCallbacks","generateCallbackId","len","tries","id","chars","chars_len","floor","random","Error","viewportHeight","viewportStableHeight","isExpanded","setViewportHeight","height","stable_height","is_expanded","is_state_stable","mainButtonHeight","isClosingConfirmationEnabled","headerColorKey","headerColor","appHeaderColorKey","appHeaderColor","updateHeaderColor","color_key","backgroundColor","getBackgroundColor","appBackgroundColor","updateBackgroundColor","match","exec","toLowerCase","versionAtLeast","ver","versionCompare","v1","v2","p1","p2","max","BackButton","isVisible","backButton","set","setParams","is_visible","get","enumerable","curButtonState","buttonParams","buttonCheckVersion","warn","btn_params","btn_state","onClick","offClick","show","hide","MainButton","isActive","isProgressVisible","buttonText","buttonColor","buttonTextColor","mainButton","text","button_color","text_color","button_text_color","is_active","onMainButtonPressed","debugBtn","debugBtnStyle","tgWebAppDebug","font","display","width","borderRadius","background","position","left","right","bottom","margin","padding","textAlign","boxSizing","zIndex","onDomLoaded","removeEventListener","body","textColor","is_progress_visible","updateButton","opacity","cursor","disabled","innerText","backgroundImage","paddingBottom","setText","enable","disable","showProgress","leaveActive","hideProgress","error","SettingsButton","settingsButton","HapticFeedback","hapticFeedback","triggerFeedback","type","impact_style","notification_type","impactOccurred","notificationOccurred","selectionChanged","CloudStorage","cloudStorage","invokeStorageMethod","method","invokeCustomMethod","getItems","err","res","keys","removeItem","removeItems","getKeys","webAppInvoices","webAppPopupOpened","webAppScanQrPopupOpened","WebAppWriteAccessRequested","WebAppContactRequested","req_id","setClosingConfirmation","need_confirmation","setHeaderColor","head_color","setBackgroundColor","enableClosingConfirmation","disableClosingConfirmation","isVersionAtLeast","sendData","byteLength","Blob","size","s","code","charCodeAt","switchInlineQuery","query","choose_chat_types","tgWebAppBotInline","chat_types","isArray","good_types","users","bots","groups","channels","chat_type","openLink","options","href","protocol","try_instant_view","open","openTelegramLink","hostname","path_full","pathname","search","openInvoice","slug","showPopup","title","message","buttons","popup_params","button","btn","button_type","showAlert","showConfirm","button_id","showScanQrPopup","closeScanQrPopup","readTextFromClipboard","requestWriteAccess","requestContact","ready","expand","close","tgWebAppShowSettings","metaKey","ctrlKey","el","target","tagName","parentNode","openTgLink","preventDefault","invoiceData","status","popupData","requestData","reqTo","fallbackTo","reqDelay","reqInvoke","requestSent","webViewEvent","response","responseUnsafe","clearTimeout","setTimeout","result","$b98eaee7c212cfa1$var$telegramWindow","initData"],"version":3,"file":"index.a793076d.js.map"}